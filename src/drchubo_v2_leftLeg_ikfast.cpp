#define IKFAST_NAMESPACE drchubo_v2_leftleg_ikfast
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-11-07 12:49:44.845540
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[2]);
x1=IKsin(j[0]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[4]);
x8=IKsin(j[4]);
x9=IKcos(j[5]);
x10=IKcos(j[1]);
x11=IKsin(j[5]);
x12=((IkReal(0.137100000000000))*(x7));
x13=((IkReal(1.00000000000000))*(x2));
x14=((IkReal(1.00000000000000))*(x8));
x15=((IkReal(1.00000000000000))*(x6));
x16=((IkReal(0.330000000000000))*(x2));
x17=((IkReal(1.00000000000000))*(x7));
x18=((IkReal(1.00000000000000))*(x5));
x19=((IkReal(0.137100000000000))*(x8));
x20=((IkReal(0.329900000000000))*(x2));
x21=((x1)*(x4));
x22=((x0)*(x1));
x23=((x3)*(x4));
x24=((IkReal(-1.00000000000000))*(x6));
x25=((x0)*(x3));
x26=((x0)*(x10));
x27=((IkReal(-1.00000000000000))*(x5));
x28=((x10)*(x11));
x29=((x10)*(x9));
x30=((IkReal(0.330000000000000))*(x25));
x31=((x10)*(x18));
x32=((x10)*(x4)*(x6));
x33=((x13)*(x21));
x34=((((IkReal(-1.00000000000000))*(x33)))+(x25));
x35=((((IkReal(-1.00000000000000))*(x21)))+(((x2)*(x25))));
x36=((((x2)*(x23)))+(x22));
x37=((((IkReal(-1.00000000000000))*(x13)*(x22)))+(((IkReal(-1.00000000000000))*(x23))));
x38=((((IkReal(-1.00000000000000))*(x18)*(x26)))+(x32));
x39=((x35)*(x6));
x40=((x34)*(x5));
x41=((((x31)*(x4)))+(((x15)*(x26))));
x42=((x38)*(x7));
x43=((((x6)*(((((IkReal(-1.00000000000000))*(x13)*(x23)))+(((IkReal(-1.00000000000000))*(x22)))))))+(((x35)*(x5))));
x44=((((x6)*(((((IkReal(-1.00000000000000))*(x25)))+(x33)))))+(((x37)*(x5))));
x45=((((IkReal(-1.00000000000000))*(x17)*(x38)))+(((IkReal(-1.00000000000000))*(x14)*(x41))));
x46=((((IkReal(-1.00000000000000))*(x17)*(x43)))+(((x14)*(((((IkReal(-1.00000000000000))*(x27)*(x36)))+(((IkReal(-1.00000000000000))*(x24)*(x35))))))));
x47=((((IkReal(-1.00000000000000))*(x17)*(x44)))+(((x14)*(((((IkReal(-1.00000000000000))*(x27)*(x34)))+(((IkReal(-1.00000000000000))*(x24)*(x37))))))));
eerot[0]=((((x7)*(((x40)+(((x37)*(x6)))))))+(((x44)*(x8))));
eerot[1]=((((IkReal(-1.00000000000000))*(x1)*(x29)))+(((x11)*(x47))));
eerot[2]=((((x47)*(x9)))+(((x1)*(x28))));
IkReal x48=((IkReal(1.00000000000000))*(x22));
eetrans[0]=((((IkReal(-0.137100000000000))*(x1)*(x28)))+(((IkReal(-1.00000000000000))*(x20)*(x48)))+(((x5)*(((((IkReal(-0.330000000000000))*(x23)))+(((IkReal(-1.00000000000000))*(x16)*(x48)))))))+(((IkReal(-0.329900000000000))*(x23)))+(((x6)*(((((IkReal(-1.00000000000000))*(x30)))+(((x16)*(x21)))))))+(((x9)*(((((x19)*(((((IkReal(-1.00000000000000))*(x18)*(x34)))+(((IkReal(-1.00000000000000))*(x15)*(x37)))))))+(((x12)*(x44))))))));
eerot[3]=((((x7)*(((x39)+(((x36)*(x5)))))))+(((x43)*(x8))));
eerot[4]=((((x29)*(x3)))+(((x11)*(x46))));
eerot[5]=((((x46)*(x9)))+(((IkReal(-1.00000000000000))*(x28)*(x3))));
eetrans[1]=((IkReal(0.0885000000000000))+(((IkReal(0.137100000000000))*(x28)*(x3)))+(((IkReal(-0.329900000000000))*(x21)))+(((x9)*(((((x12)*(x43)))+(((x19)*(((((IkReal(-1.00000000000000))*(x18)*(x36)))+(((IkReal(-1.00000000000000))*(x15)*(x35)))))))))))+(((x6)*(((((IkReal(-1.00000000000000))*(x16)*(x23)))+(((IkReal(-0.330000000000000))*(x22)))))))+(((x20)*(x25)))+(((x5)*(((((x16)*(x25)))+(((IkReal(-0.330000000000000))*(x21))))))));
eerot[6]=((((x38)*(x8)))+(((IkReal(-1.00000000000000))*(x41)*(x7))));
eerot[7]=((((x11)*(x45)))+(((x2)*(x9))));
eerot[8]=((((IkReal(-1.00000000000000))*(x11)*(x13)))+(((x45)*(x9))));
eetrans[2]=((IkReal(-0.164000000000000))+(((x9)*(((((x19)*(x41)))+(((x12)*(x38)))))))+(((IkReal(-0.330000000000000))*(x26)*(x5)))+(((IkReal(-0.329900000000000))*(x26)))+(((IkReal(0.330000000000000))*(x32)))+(((IkReal(0.137100000000000))*(x11)*(x2))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j11,cj11,sj11,htj11,j12,cj12,sj12,htj12,j13,cj13,sj13,htj13,j14,cj14,sj14,htj14,j15,cj15,sj15,htj15,j16,cj16,sj16,htj16,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij11[2], _nj11,_ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14,_ij15[2], _nj15,_ij16[2], _nj16;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((IkReal(-1.00000000000000))*(r02));
new_r01=r01;
new_r02=r00;
new_px=((px)+(((IkReal(0.137100000000000))*(r02))));
new_r10=((IkReal(-1.00000000000000))*(r12));
new_r11=r11;
new_r12=r10;
new_py=((IkReal(-0.0885000000000000))+(py)+(((IkReal(0.137100000000000))*(r12))));
new_r20=((IkReal(-1.00000000000000))*(r22));
new_r21=r21;
new_r22=r20;
new_pz=((IkReal(0.164000000000000))+(pz)+(((IkReal(0.137100000000000))*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
cj14array[0]=((IkReal(-1.00000004592760))+(((IkReal(4.59275997317828))*(pp))));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(npy))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x49=IKatan2(((IkReal(-1.00000000000000))*(npy)), ((IkReal(-1.00000000000000))*(npx)));
j16array[0]=((IkReal(-1.00000000000000))*(x49));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x49))));
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x50=((IkReal(3299.00000000000))*(cj14));
IkReal x51=((cj16)*(npx));
IkReal x52=((npy)*(sj16));
gconst0=IKsign(((((IkReal(3300.00000000000))*(x52)))+(((IkReal(-3300.00000000000))*(x51)))+(((x50)*(x52)))+(((IkReal(3299.00000000000))*(npz)*(sj14)))+(((IkReal(-1.00000000000000))*(x50)*(x51)))));
IkReal x53=((cj16)*(npx));
IkReal x54=((npy)*(sj16));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj14)*(x53)))+(((IkReal(1.00030312215823))*(x54)))+(((cj14)*(x54)))+(((IkReal(-1.00030312215823))*(x53)))+(((npz)*(sj14))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((cj16)*(npx)*(sj14)))+(((IkReal(1.00030312215823))*(npz)))+(((cj14)*(npz)))+(((IkReal(-1.00000000000000))*(npy)*(sj14)*(sj16))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x55=((IkReal(10000.0000000000))*(npz));
IkReal x56=((npy)*(sj16));
IkReal x57=((cj16)*(npx));
IkReal x58=((IkReal(3299.00000000000))*(sj14));
IkReal x59=((IkReal(32990000.0000000))*(sj14));
IkReal x60=((cj14)*(npz));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x56)*(x59)))+(((IkReal(32990000.0000000))*(x60)))+(((x57)*(x59)))+(((IkReal(33000000.0000000))*(npz))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x56)*(x59)))+(((IkReal(32990000.0000000))*(x60)))+(((x57)*(x59)))+(((IkReal(33000000.0000000))*(npz)))))):(IkReal)1.0e30))*(((((IkReal(-10883401.0000000))*((sj14)*(sj14))))+(((IkReal(100000000.000000))*((npz)*(npz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(3300.00000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x56)*(x58)))+(((IkReal(3299.00000000000))*(x60)))+(((x57)*(x58))))) != 0)?((IkReal)1/(((((IkReal(3300.00000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x56)*(x58)))+(((IkReal(3299.00000000000))*(x60)))+(((x57)*(x58)))))):(IkReal)1.0e30))*(((((IkReal(1088.34010000000))*(cj14)*(sj14)))+(((IkReal(1088.67000000000))*(sj14)))+(((IkReal(-1.00000000000000))*(x55)*(x56)))+(((x55)*(x57))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x56)*(x59)))+(((IkReal(32990000.0000000))*(x60)))+(((x57)*(x59)))+(((IkReal(33000000.0000000))*(npz))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x56)*(x59)))+(((IkReal(32990000.0000000))*(x60)))+(((x57)*(x59)))+(((IkReal(33000000.0000000))*(npz)))))):(IkReal)1.0e30))*(((((IkReal(-10883401.0000000))*((sj14)*(sj14))))+(((IkReal(100000000.000000))*((npz)*(npz))))))))+IKsqr(((((IKabs(((((IkReal(3300.00000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x56)*(x58)))+(((IkReal(3299.00000000000))*(x60)))+(((x57)*(x58))))) != 0)?((IkReal)1/(((((IkReal(3300.00000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x56)*(x58)))+(((IkReal(3299.00000000000))*(x60)))+(((x57)*(x58)))))):(IkReal)1.0e30))*(((((IkReal(1088.34010000000))*(cj14)*(sj14)))+(((IkReal(1088.67000000000))*(sj14)))+(((IkReal(-1.00000000000000))*(x55)*(x56)))+(((x55)*(x57)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x56)*(x59)))+(((IkReal(32990000.0000000))*(x60)))+(((x57)*(x59)))+(((IkReal(33000000.0000000))*(npz))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x56)*(x59)))+(((IkReal(32990000.0000000))*(x60)))+(((x57)*(x59)))+(((IkReal(33000000.0000000))*(npz)))))):(IkReal)1.0e30))*(((((IkReal(-10883401.0000000))*((sj14)*(sj14))))+(((IkReal(100000000.000000))*((npz)*(npz))))))), ((((IKabs(((((IkReal(3300.00000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x56)*(x58)))+(((IkReal(3299.00000000000))*(x60)))+(((x57)*(x58))))) != 0)?((IkReal)1/(((((IkReal(3300.00000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x56)*(x58)))+(((IkReal(3299.00000000000))*(x60)))+(((x57)*(x58)))))):(IkReal)1.0e30))*(((((IkReal(1088.34010000000))*(cj14)*(sj14)))+(((IkReal(1088.67000000000))*(sj14)))+(((IkReal(-1.00000000000000))*(x55)*(x56)))+(((x55)*(x57)))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x61=IKsin(j15);
IkReal x62=IKcos(j15);
IkReal x63=((npy)*(sj16));
IkReal x64=((IkReal(0.329900000000000))*(sj14));
IkReal x65=((IkReal(0.329900000000000))*(cj14));
IkReal x66=((IkReal(1.00000000000000))*(npz));
IkReal x67=((IkReal(1.00000000000000))*(cj16)*(npx));
evalcond[0]=((((x62)*(x64)))+(((IkReal(0.330000000000000))*(x61)))+(((x61)*(x65)))+(((IkReal(-1.00000000000000))*(x66))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x61)*(x63)))+(x64)+(((cj16)*(npx)*(x61)))+(((IkReal(-1.00000000000000))*(x62)*(x66))));
evalcond[2]=((IkReal(0.330000000000000))+(((IkReal(-1.00000000000000))*(x61)*(x66)))+(((x62)*(x63)))+(x65)+(((IkReal(-1.00000000000000))*(x62)*(x67))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x61)*(x64)))+(((x62)*(x65)))+(((IkReal(0.330000000000000))*(x62)))+(x63)+(((IkReal(-1.00000000000000))*(x67))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x205=((IkReal(10000.0000000000))*(npz));
if( IKabs(((gconst0)*(((((IkReal(1088.34010000000))*(cj14)*(sj14)))+(((IkReal(1088.67000000000))*(sj14)))+(((IkReal(-1.00000000000000))*(cj16)*(npx)*(x205)))+(((npy)*(sj16)*(x205))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((IkReal(-1089.00000000000))+(((IkReal(-2177.34000000000))*(cj14)))+(((npz)*(x205)))+(((IkReal(-1088.34010000000))*((cj14)*(cj14)))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j15array[0]=IKatan2(((gconst0)*(((((IkReal(1088.34010000000))*(cj14)*(sj14)))+(((IkReal(1088.67000000000))*(sj14)))+(((IkReal(-1.00000000000000))*(cj16)*(npx)*(x205)))+(((npy)*(sj16)*(x205)))))), ((gconst0)*(((IkReal(-1089.00000000000))+(((IkReal(-2177.34000000000))*(cj14)))+(((npz)*(x205)))+(((IkReal(-1088.34010000000))*((cj14)*(cj14))))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x206=IKsin(j15);
IkReal x207=IKcos(j15);
IkReal x208=((npy)*(sj16));
IkReal x209=((IkReal(0.329900000000000))*(sj14));
IkReal x210=((IkReal(0.329900000000000))*(cj14));
IkReal x211=((IkReal(1.00000000000000))*(npz));
IkReal x212=((IkReal(1.00000000000000))*(cj16)*(npx));
evalcond[0]=((((IkReal(0.330000000000000))*(x206)))+(((x206)*(x210)))+(((IkReal(-1.00000000000000))*(x211)))+(((x207)*(x209))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x206)*(x208)))+(((IkReal(-1.00000000000000))*(x207)*(x211)))+(x209)+(((cj16)*(npx)*(x206))));
evalcond[2]=((IkReal(0.330000000000000))+(((IkReal(-1.00000000000000))*(x206)*(x211)))+(((IkReal(-1.00000000000000))*(x207)*(x212)))+(x210)+(((x207)*(x208))));
evalcond[3]=((((IkReal(0.330000000000000))*(x207)))+(((x207)*(x210)))+(((IkReal(-1.00000000000000))*(x206)*(x209)))+(x208)+(((IkReal(-1.00000000000000))*(x212))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x68=((cj15)*(r02));
IkReal x69=((cj15)*(r22));
IkReal x70=((IkReal(1.00000000000000))*(sj14));
IkReal x71=((IkReal(1.00000000000000))*(sj15));
IkReal x72=((IkReal(1.00000000000000))*(sj16));
IkReal x73=((IkReal(-1.00000000000000))*(sj15));
IkReal x74=((((IkReal(-1.00000000000000))*(r01)*(x72)))+(((cj16)*(r00))));
IkReal x75=((((cj16)*(r10)))+(((IkReal(-1.00000000000000))*(r11)*(x72))));
IkReal x76=((((IkReal(-1.00000000000000))*(r21)*(x72)))+(((cj16)*(r20))));
IkReal x77=((((r02)*(sj15)))+(((cj15)*(x74))));
IkReal x78=((((cj15)*(x75)))+(((r12)*(sj15))));
IkReal x79=((((cj15)*(r12)))+(((IkReal(-1.00000000000000))*(x71)*(x75))));
IkReal x80=((((cj15)*(x76)))+(((r22)*(sj15))));
new_r00=((((IkReal(-1.00000000000000))*(x70)*(x77)))+(((cj14)*(((x68)+(((x73)*(x74))))))));
new_r01=((((sj14)*(((x68)+(((IkReal(-1.00000000000000))*(x71)*(x74)))))))+(((cj14)*(x77))));
new_r02=((((r00)*(sj16)))+(((cj16)*(r01))));
new_r10=((((cj14)*(x79)))+(((IkReal(-1.00000000000000))*(x70)*(x78))));
new_r11=((((sj14)*(x79)))+(((cj14)*(x78))));
new_r12=((((cj16)*(r11)))+(((r10)*(sj16))));
new_r20=((((IkReal(-1.00000000000000))*(x70)*(x80)))+(((cj14)*(((x69)+(((IkReal(-1.00000000000000))*(x71)*(x76))))))));
new_r21=((((sj14)*(((x69)+(((x73)*(x76)))))))+(((cj14)*(x80))));
new_r22=((((r20)*(sj16)))+(((cj16)*(r21))));
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
sj12array[0]=new_r22;
if( sj12array[0] >= -1-IKFAST_SINCOS_THRESH && sj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKasin(sj12array[0]);
    cj12array[0] = IKcos(j12array[0]);
    sj12array[1] = sj12array[0];
    j12array[1] = j12array[0] > 0 ? (IKPI-j12array[0]) : (-IKPI-j12array[0]);
    cj12array[1] = -cj12array[0];
}
else if( isnan(sj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(cj12);
dummyeval[0]=cj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((cj12)*(new_r10)*(new_r12)))+(((cj12)*(new_r00)*(new_r02)))));
dummyeval[0]=((((cj12)*(new_r10)*(new_r12)))+(((cj12)*(new_r00)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x81=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j12)), IkReal(6.28318530717959))));
evalcond[1]=x81;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x81;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x82=IKatan2(new_r02, new_r12);
j11array[0]=((IkReal(-1.00000000000000))*(x82));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x82))));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j11))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j11)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj11)))+(((cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))))+IKsqr(((((new_r10)*(sj11)))+(((cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))), ((((new_r10)*(sj11)))+(((cj11)*(new_r00)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x83=IKsin(j13);
IkReal x84=((IkReal(1.00000000000000))*(sj11));
IkReal x85=((IkReal(1.00000000000000))*(IKcos(j13)));
evalcond[0]=((x83)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x85)))+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
evalcond[2]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x84)))+(((IkReal(-1.00000000000000))*(x83))));
evalcond[3]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x84)))+(((IkReal(-1.00000000000000))*(x85))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j12)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x86=IKatan2(new_r02, new_r12);
j11array[0]=((IkReal(-1.00000000000000))*(x86));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x86))));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j11))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j11)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj11)))+(((cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))))+IKsqr(((((new_r10)*(sj11)))+(((cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))), ((((new_r10)*(sj11)))+(((cj11)*(new_r00)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x87=IKsin(j13);
IkReal x88=IKcos(j13);
IkReal x89=((IkReal(1.00000000000000))*(sj11));
evalcond[0]=((x87)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x88)))+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
evalcond[2]=((((cj11)*(new_r10)))+(x87)+(((IkReal(-1.00000000000000))*(new_r00)*(x89))));
evalcond[3]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x89)))+(x88));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x90=((gconst2)*(new_r20)*(sj12));
if( IKabs(((new_r02)*(x90))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x90))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((new_r02)*(x90)), ((IkReal(-1.00000000000000))*(new_r12)*(x90)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x91=IKcos(j11);
IkReal x92=IKsin(j11);
IkReal x93=((IkReal(1.00000000000000))*(cj12));
IkReal x94=((cj12)*(x91));
IkReal x95=((new_r02)*(x92));
IkReal x96=((new_r12)*(x91));
evalcond[0]=((((new_r02)*(x91)))+(((new_r12)*(x92))));
evalcond[1]=((x96)+(((IkReal(-1.00000000000000))*(x95)))+(((IkReal(-1.00000000000000))*(x93))));
evalcond[2]=((((new_r10)*(x94)))+(((new_r20)*(sj12)))+(((IkReal(-1.00000000000000))*(new_r00)*(x92)*(x93))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x92)*(x93)))+(((new_r21)*(sj12)))+(((new_r11)*(x94))));
evalcond[4]=((((sj12)*(x96)))+(((IkReal(-1.00000000000000))*(new_r22)*(x93)))+(((IkReal(-1.00000000000000))*(sj12)*(x95))));
evalcond[5]=((IkReal(-1.00000000000000))+(((new_r22)*(sj12)))+(((IkReal(-1.00000000000000))*(x93)*(x95)))+(((new_r12)*(x94))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(cj12);
dummyeval[0]=cj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x97=((IkReal(-1.00000000000000))+(new_r22));
IkReal x98=((((cj11)*(new_r02)))+(((new_r12)*(sj11))));
IkReal x99=((((cj11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj11))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j12)), IkReal(6.28318530717959))));
evalcond[1]=x97;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x98;
evalcond[5]=x98;
evalcond[6]=x99;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x99;
evalcond[10]=x97;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj11)))+(((cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))))+IKsqr(((((new_r10)*(sj11)))+(((cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))), ((((new_r10)*(sj11)))+(((cj11)*(new_r00)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x100=IKsin(j13);
IkReal x101=((IkReal(1.00000000000000))*(sj11));
IkReal x102=((IkReal(1.00000000000000))*(IKcos(j13)));
evalcond[0]=((x100)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x102)))+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
evalcond[2]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x101)))+(((IkReal(-1.00000000000000))*(x100))));
evalcond[3]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x101)))+(((IkReal(-1.00000000000000))*(x102))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x103=((new_r02)*(sj11));
IkReal x104=((cj11)*(new_r12));
IkReal x105=((((cj11)*(new_r02)))+(((new_r12)*(sj11))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j12)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x105;
evalcond[5]=x105;
evalcond[6]=((x104)+(((IkReal(-1.00000000000000))*(x103))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((x103)+(((IkReal(-1.00000000000000))*(x104))));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj11)))+(((cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))))+IKsqr(((((new_r10)*(sj11)))+(((cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))), ((((new_r10)*(sj11)))+(((cj11)*(new_r00)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x106=IKsin(j13);
IkReal x107=IKcos(j13);
IkReal x108=((IkReal(1.00000000000000))*(sj11));
evalcond[0]=((x106)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[1]=((((new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(x107)))+(((cj11)*(new_r00))));
evalcond[2]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x108)))+(x106));
evalcond[3]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x108)))+(x107));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj12) != 0)?((IkReal)1/(cj12)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj12) != 0)?((IkReal)1/(cj12)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj12) != 0)?((IkReal)1/(cj12)):(IkReal)1.0e30))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x109=IKsin(j13);
IkReal x110=IKcos(j13);
IkReal x111=((IkReal(1.00000000000000))*(sj12));
IkReal x112=((new_r01)*(sj11));
IkReal x113=((cj11)*(new_r11));
IkReal x114=((new_r00)*(sj11));
IkReal x115=((IkReal(1.00000000000000))*(cj12));
IkReal x116=((cj11)*(new_r10));
IkReal x117=((IkReal(1.00000000000000))*(x110));
evalcond[0]=((((cj12)*(x109)))+(new_r20));
evalcond[1]=((((cj12)*(x110)))+(new_r21));
evalcond[2]=((x109)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x117)))+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
evalcond[4]=((x116)+(((IkReal(-1.00000000000000))*(x109)*(x111)))+(((IkReal(-1.00000000000000))*(x114))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x110)*(x111)))+(x113)+(((IkReal(-1.00000000000000))*(x112))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x111)*(x114)))+(((IkReal(-1.00000000000000))*(new_r20)*(x115)))+(((sj12)*(x116)))+(((IkReal(-1.00000000000000))*(x109))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x111)*(x112)))+(((IkReal(-1.00000000000000))*(x117)))+(((IkReal(-1.00000000000000))*(new_r21)*(x115)))+(((sj12)*(x113))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj12) != 0)?((IkReal)1/(cj12)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj11)))+(((cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj12) != 0)?((IkReal)1/(cj12)):(IkReal)1.0e30))))+IKsqr(((((new_r10)*(sj11)))+(((cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj12) != 0)?((IkReal)1/(cj12)):(IkReal)1.0e30))), ((((new_r10)*(sj11)))+(((cj11)*(new_r00)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x118=IKsin(j13);
IkReal x119=IKcos(j13);
IkReal x120=((IkReal(1.00000000000000))*(sj12));
IkReal x121=((new_r01)*(sj11));
IkReal x122=((cj11)*(new_r11));
IkReal x123=((new_r00)*(sj11));
IkReal x124=((IkReal(1.00000000000000))*(cj12));
IkReal x125=((cj11)*(new_r10));
IkReal x126=((IkReal(1.00000000000000))*(x119));
evalcond[0]=((((cj12)*(x118)))+(new_r20));
evalcond[1]=((((cj12)*(x119)))+(new_r21));
evalcond[2]=((x118)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x126)))+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x118)*(x120)))+(x125)+(((IkReal(-1.00000000000000))*(x123))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x119)*(x120)))+(x122)+(((IkReal(-1.00000000000000))*(x121))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x120)*(x123)))+(((IkReal(-1.00000000000000))*(new_r20)*(x124)))+(((sj12)*(x125)))+(((IkReal(-1.00000000000000))*(x118))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x120)*(x121)))+(((IkReal(-1.00000000000000))*(new_r21)*(x124)))+(((IkReal(-1.00000000000000))*(x126)))+(((sj12)*(x122))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x127=((IkReal(-1.00000000000000))*(gconst4));
if( IKabs(((new_r20)*(x127))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r21)*(x127))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j13array[0]=IKatan2(((new_r20)*(x127)), ((new_r21)*(x127)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x128=IKsin(j13);
IkReal x129=IKcos(j13);
IkReal x130=((IkReal(1.00000000000000))*(sj12));
IkReal x131=((new_r01)*(sj11));
IkReal x132=((cj11)*(new_r11));
IkReal x133=((new_r00)*(sj11));
IkReal x134=((IkReal(1.00000000000000))*(cj12));
IkReal x135=((cj11)*(new_r10));
IkReal x136=((IkReal(1.00000000000000))*(x129));
evalcond[0]=((((cj12)*(x128)))+(new_r20));
evalcond[1]=((((cj12)*(x129)))+(new_r21));
evalcond[2]=((x128)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x136)))+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
evalcond[4]=((x135)+(((IkReal(-1.00000000000000))*(x128)*(x130)))+(((IkReal(-1.00000000000000))*(x133))));
evalcond[5]=((x132)+(((IkReal(-1.00000000000000))*(x131)))+(((IkReal(-1.00000000000000))*(x129)*(x130))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x134)))+(((IkReal(-1.00000000000000))*(x128)))+(((sj12)*(x135)))+(((IkReal(-1.00000000000000))*(x130)*(x133))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x134)))+(((IkReal(-1.00000000000000))*(x136)))+(((sj12)*(x132)))+(((IkReal(-1.00000000000000))*(x130)*(x131))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x137=((cj12)*(gconst1));
if( IKabs(((new_r02)*(x137))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x137))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((new_r02)*(x137)), ((IkReal(-1.00000000000000))*(new_r12)*(x137)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x138=IKcos(j11);
IkReal x139=IKsin(j11);
IkReal x140=((IkReal(1.00000000000000))*(cj12));
IkReal x141=((cj12)*(x138));
IkReal x142=((new_r02)*(x139));
IkReal x143=((new_r12)*(x138));
evalcond[0]=((((new_r12)*(x139)))+(((new_r02)*(x138))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x140)))+(x143)+(((IkReal(-1.00000000000000))*(x142))));
evalcond[2]=((((new_r10)*(x141)))+(((IkReal(-1.00000000000000))*(new_r00)*(x139)*(x140)))+(((new_r20)*(sj12))));
evalcond[3]=((((new_r11)*(x141)))+(((IkReal(-1.00000000000000))*(new_r01)*(x139)*(x140)))+(((new_r21)*(sj12))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r22)*(x140)))+(((sj12)*(x143)))+(((IkReal(-1.00000000000000))*(sj12)*(x142))));
evalcond[5]=((IkReal(-1.00000000000000))+(((new_r12)*(x141)))+(((IkReal(-1.00000000000000))*(x140)*(x142)))+(((new_r22)*(sj12))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(cj12);
dummyeval[0]=cj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x144=((IkReal(-1.00000000000000))+(new_r22));
IkReal x145=((((cj11)*(new_r02)))+(((new_r12)*(sj11))));
IkReal x146=((((cj11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj11))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j12)), IkReal(6.28318530717959))));
evalcond[1]=x144;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x145;
evalcond[5]=x145;
evalcond[6]=x146;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x146;
evalcond[10]=x144;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj11)))+(((cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))))+IKsqr(((((new_r10)*(sj11)))+(((cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))), ((((new_r10)*(sj11)))+(((cj11)*(new_r00)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x147=IKsin(j13);
IkReal x148=((IkReal(1.00000000000000))*(sj11));
IkReal x149=((IkReal(1.00000000000000))*(IKcos(j13)));
evalcond[0]=((x147)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x149)))+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
evalcond[2]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(x147)))+(((IkReal(-1.00000000000000))*(new_r00)*(x148))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x148)))+(((IkReal(-1.00000000000000))*(x149)))+(((cj11)*(new_r11))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x150=((new_r02)*(sj11));
IkReal x151=((cj11)*(new_r12));
IkReal x152=((((cj11)*(new_r02)))+(((new_r12)*(sj11))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j12)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x152;
evalcond[5]=x152;
evalcond[6]=((x151)+(((IkReal(-1.00000000000000))*(x150))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((x150)+(((IkReal(-1.00000000000000))*(x151))));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj11)))+(((cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))))+IKsqr(((((new_r10)*(sj11)))+(((cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))), ((((new_r10)*(sj11)))+(((cj11)*(new_r00)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x153=IKsin(j13);
IkReal x154=IKcos(j13);
IkReal x155=((IkReal(1.00000000000000))*(sj11));
evalcond[0]=((x153)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x154)))+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
evalcond[2]=((((cj11)*(new_r10)))+(x153)+(((IkReal(-1.00000000000000))*(new_r00)*(x155))));
evalcond[3]=((((cj11)*(new_r11)))+(x154)+(((IkReal(-1.00000000000000))*(new_r01)*(x155))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj12) != 0)?((IkReal)1/(cj12)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj12) != 0)?((IkReal)1/(cj12)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj12) != 0)?((IkReal)1/(cj12)):(IkReal)1.0e30))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x156=IKsin(j13);
IkReal x157=IKcos(j13);
IkReal x158=((IkReal(1.00000000000000))*(sj12));
IkReal x159=((new_r01)*(sj11));
IkReal x160=((cj11)*(new_r11));
IkReal x161=((new_r00)*(sj11));
IkReal x162=((IkReal(1.00000000000000))*(cj12));
IkReal x163=((cj11)*(new_r10));
IkReal x164=((IkReal(1.00000000000000))*(x157));
evalcond[0]=((((cj12)*(x156)))+(new_r20));
evalcond[1]=((((cj12)*(x157)))+(new_r21));
evalcond[2]=((x156)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x164)))+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
evalcond[4]=((x163)+(((IkReal(-1.00000000000000))*(x161)))+(((IkReal(-1.00000000000000))*(x156)*(x158))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x157)*(x158)))+(x160)+(((IkReal(-1.00000000000000))*(x159))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x158)*(x161)))+(((IkReal(-1.00000000000000))*(new_r20)*(x162)))+(((sj12)*(x163)))+(((IkReal(-1.00000000000000))*(x156))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x162)))+(((IkReal(-1.00000000000000))*(x164)))+(((IkReal(-1.00000000000000))*(x158)*(x159)))+(((sj12)*(x160))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj12) != 0)?((IkReal)1/(cj12)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj11)))+(((cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj12) != 0)?((IkReal)1/(cj12)):(IkReal)1.0e30))))+IKsqr(((((new_r10)*(sj11)))+(((cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj12) != 0)?((IkReal)1/(cj12)):(IkReal)1.0e30))), ((((new_r10)*(sj11)))+(((cj11)*(new_r00)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x165=IKsin(j13);
IkReal x166=IKcos(j13);
IkReal x167=((IkReal(1.00000000000000))*(sj12));
IkReal x168=((new_r01)*(sj11));
IkReal x169=((cj11)*(new_r11));
IkReal x170=((new_r00)*(sj11));
IkReal x171=((IkReal(1.00000000000000))*(cj12));
IkReal x172=((cj11)*(new_r10));
IkReal x173=((IkReal(1.00000000000000))*(x166));
evalcond[0]=((((cj12)*(x165)))+(new_r20));
evalcond[1]=((((cj12)*(x166)))+(new_r21));
evalcond[2]=((x165)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x173)))+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x170)))+(x172)+(((IkReal(-1.00000000000000))*(x165)*(x167))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x166)*(x167)))+(x169)+(((IkReal(-1.00000000000000))*(x168))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x171)))+(((IkReal(-1.00000000000000))*(x165)))+(((sj12)*(x172)))+(((IkReal(-1.00000000000000))*(x167)*(x170))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x171)))+(((IkReal(-1.00000000000000))*(x173)))+(((sj12)*(x169)))+(((IkReal(-1.00000000000000))*(x167)*(x168))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x174=((IkReal(-1.00000000000000))*(gconst4));
if( IKabs(((new_r20)*(x174))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r21)*(x174))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j13array[0]=IKatan2(((new_r20)*(x174)), ((new_r21)*(x174)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x175=IKsin(j13);
IkReal x176=IKcos(j13);
IkReal x177=((IkReal(1.00000000000000))*(sj12));
IkReal x178=((new_r01)*(sj11));
IkReal x179=((cj11)*(new_r11));
IkReal x180=((new_r00)*(sj11));
IkReal x181=((IkReal(1.00000000000000))*(cj12));
IkReal x182=((cj11)*(new_r10));
IkReal x183=((IkReal(1.00000000000000))*(x176));
evalcond[0]=((((cj12)*(x175)))+(new_r20));
evalcond[1]=((((cj12)*(x176)))+(new_r21));
evalcond[2]=((x175)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x183)))+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x175)*(x177)))+(((IkReal(-1.00000000000000))*(x180)))+(x182));
evalcond[5]=((((IkReal(-1.00000000000000))*(x178)))+(x179)+(((IkReal(-1.00000000000000))*(x176)*(x177))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x175)))+(((sj12)*(x182)))+(((IkReal(-1.00000000000000))*(new_r20)*(x181)))+(((IkReal(-1.00000000000000))*(x177)*(x180))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x183)))+(((IkReal(-1.00000000000000))*(new_r21)*(x181)))+(((IkReal(-1.00000000000000))*(x177)*(x178)))+(((sj12)*(x179))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x184=((IkReal(-1.00000000000000))*(gconst3));
if( IKabs(((new_r20)*(x184))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r21)*(x184))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j13array[0]=IKatan2(((new_r20)*(x184)), ((new_r21)*(x184)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[2];
evalcond[0]=((((cj12)*(IKsin(j13))))+(new_r20));
evalcond[1]=((((cj12)*(IKcos(j13))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x185=((cj13)*(gconst6));
if( IKabs(((new_r02)*(x185))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x185))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((new_r02)*(x185)), ((IkReal(-1.00000000000000))*(new_r12)*(x185)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x186=IKcos(j11);
IkReal x187=IKsin(j11);
IkReal x188=((IkReal(1.00000000000000))*(cj13));
IkReal x189=((IkReal(1.00000000000000))*(cj12));
IkReal x190=((IkReal(1.00000000000000))*(sj13));
IkReal x191=((IkReal(1.00000000000000))*(x187));
IkReal x192=((new_r12)*(x186));
IkReal x193=((new_r11)*(x186));
IkReal x194=((new_r10)*(x186));
evalcond[0]=((((new_r02)*(x186)))+(((new_r12)*(x187))));
evalcond[1]=((((new_r11)*(x187)))+(((new_r01)*(x186)))+(sj13));
evalcond[2]=((((new_r10)*(x187)))+(((new_r00)*(x186)))+(((IkReal(-1.00000000000000))*(x188))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x189)))+(x192)+(((IkReal(-1.00000000000000))*(new_r02)*(x191))));
evalcond[4]=((x194)+(((IkReal(-1.00000000000000))*(sj12)*(x190)))+(((IkReal(-1.00000000000000))*(new_r00)*(x191))));
evalcond[5]=((x193)+(((IkReal(-1.00000000000000))*(sj12)*(x188)))+(((IkReal(-1.00000000000000))*(new_r01)*(x191))));
evalcond[6]=((((cj12)*(x194)))+(((IkReal(-1.00000000000000))*(new_r00)*(x187)*(x189)))+(((new_r20)*(sj12))));
evalcond[7]=((((cj12)*(x193)))+(((new_r21)*(sj12)))+(((IkReal(-1.00000000000000))*(new_r01)*(x187)*(x189))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r02)*(sj12)*(x191)))+(((IkReal(-1.00000000000000))*(new_r22)*(x189)))+(((sj12)*(x192))));
evalcond[9]=((IkReal(-1.00000000000000))+(((cj12)*(x192)))+(((new_r22)*(sj12)))+(((IkReal(-1.00000000000000))*(new_r02)*(x187)*(x189))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r00)*(sj12)*(x191)))+(((IkReal(-1.00000000000000))*(x190)))+(((IkReal(-1.00000000000000))*(new_r20)*(x189)))+(((sj12)*(x194))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x188)))+(((IkReal(-1.00000000000000))*(new_r21)*(x189)))+(((sj12)*(x193)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj12)*(x191))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x195=((gconst5)*(sj13));
if( IKabs(((new_r02)*(x195))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x195))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((new_r02)*(x195)), ((IkReal(-1.00000000000000))*(new_r12)*(x195)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x196=IKcos(j11);
IkReal x197=IKsin(j11);
IkReal x198=((IkReal(1.00000000000000))*(cj13));
IkReal x199=((IkReal(1.00000000000000))*(cj12));
IkReal x200=((IkReal(1.00000000000000))*(sj13));
IkReal x201=((IkReal(1.00000000000000))*(x197));
IkReal x202=((new_r12)*(x196));
IkReal x203=((new_r11)*(x196));
IkReal x204=((new_r10)*(x196));
evalcond[0]=((((new_r02)*(x196)))+(((new_r12)*(x197))));
evalcond[1]=((((new_r11)*(x197)))+(((new_r01)*(x196)))+(sj13));
evalcond[2]=((((new_r10)*(x197)))+(((new_r00)*(x196)))+(((IkReal(-1.00000000000000))*(x198))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r02)*(x201)))+(((IkReal(-1.00000000000000))*(x199)))+(x202));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r00)*(x201)))+(((IkReal(-1.00000000000000))*(sj12)*(x200)))+(x204));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj12)*(x198)))+(x203)+(((IkReal(-1.00000000000000))*(new_r01)*(x201))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r00)*(x197)*(x199)))+(((cj12)*(x204)))+(((new_r20)*(sj12))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r01)*(x197)*(x199)))+(((cj12)*(x203)))+(((new_r21)*(sj12))));
evalcond[8]=((((sj12)*(x202)))+(((IkReal(-1.00000000000000))*(new_r22)*(x199)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj12)*(x201))));
evalcond[9]=((IkReal(-1.00000000000000))+(((new_r22)*(sj12)))+(((cj12)*(x202)))+(((IkReal(-1.00000000000000))*(new_r02)*(x197)*(x199))));
evalcond[10]=((((sj12)*(x204)))+(((IkReal(-1.00000000000000))*(new_r20)*(x199)))+(((IkReal(-1.00000000000000))*(x200)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj12)*(x201))));
evalcond[11]=((((sj12)*(x203)))+(((IkReal(-1.00000000000000))*(x198)))+(((IkReal(-1.00000000000000))*(new_r21)*(x199)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj12)*(x201))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "174142f123815ddb39cb1fa14c795369"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h"
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
