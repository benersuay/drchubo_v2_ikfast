#define IKFAST_NAMESPACE drchubo_v2_leftarm_ikfast
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-11-07 10:50:50.972054
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[1]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=IKcos(j[6]);
x13=IKsin(j[6]);
x14=((IkReal(0.118000000000000))*(x9));
x15=((IkReal(1.00000000000000))*(x8));
x16=((IkReal(1.00000000000000))*(x9));
x17=((IkReal(1.00000000000000))*(x4));
x18=((IkReal(0.0300000000000000))*(x2));
x19=((IkReal(1.00000000000000))*(x5));
x20=((IkReal(0.118000000000000))*(x5));
x21=((IkReal(0.118000000000000))*(x7));
x22=((IkReal(1.00000000000000))*(x11));
x23=((IkReal(1.00000000000000))*(x7));
x24=((IkReal(0.313800000000000))*(x2));
x25=((IkReal(0.313800000000000))*(x7));
x26=((IkReal(0.118000000000000))*(x8));
x27=((x1)*(x3));
x28=((x2)*(x7));
x29=((x0)*(x1));
x30=((x0)*(x4));
x31=((x0)*(x6));
x32=((x1)*(x6));
x33=((x4)*(x6));
x34=((x3)*(x6));
x35=((x3)*(x4));
x36=((IkReal(0.0300000000000000))*(x27));
x37=((IkReal(0.0300000000000000))*(x29));
x38=((x33)*(x7));
x39=((x34)*(x5));
x40=((x19)*(x31));
x41=((x23)*(x31));
x42=((x18)*(x30));
x43=((x17)*(x5)*(x6));
x44=((x17)*(x2)*(x3));
x45=((x18)*(x35));
x46=((((IkReal(-1.00000000000000))*(x17)*(x3)))+(((x2)*(x29))));
x47=((((x2)*(x30)))+(x27));
x48=((((IkReal(-1.00000000000000))*(x43)))+(x28));
x49=((x38)+(((x2)*(x5))));
x50=((((IkReal(-1.00000000000000))*(x44)))+(x29));
x51=((((IkReal(-1.00000000000000))*(x29)))+(x44));
x52=((((IkReal(-1.00000000000000))*(x27)))+(((IkReal(-1.00000000000000))*(x0)*(x17)*(x2))));
x53=((((IkReal(-1.00000000000000))*(x0)*(x17)))+(((IkReal(-1.00000000000000))*(x2)*(x27))));
x54=((x36)+(x42));
x55=((x50)*(x7));
x56=((x46)*(x8));
x57=((x53)*(x8));
x58=((x5)*(x52));
x59=((((IkReal(-1.00000000000000))*(x40)))+(((x47)*(x7))));
x60=((((x32)*(x8)))+(((x49)*(x9))));
x61=((x39)+(x55));
x62=((((x34)*(x7)))+(((x5)*(x51))));
x63=((((IkReal(-1.00000000000000))*(x41)))+(x58));
x64=((((x32)*(x9)))+(((x8)*(((((IkReal(-1.00000000000000))*(x19)*(x2)))+(((IkReal(-1.00000000000000))*(x17)*(x6)*(x7))))))));
x65=((x10)*(x60));
x66=((x11)*(x63));
x67=((x56)+(((x59)*(x9))));
x68=((((x8)*(((x40)+(((IkReal(-1.00000000000000))*(x23)*(x47)))))))+(((x46)*(x9))));
x69=((x57)+(((x61)*(x9))));
x70=((x10)*(x67));
x71=((x10)*(x69));
eerot[0]=((((x12)*(x68)))+(((x13)*(((((IkReal(-1.00000000000000))*(x70)))+(((IkReal(-1.00000000000000))*(x66))))))));
eerot[1]=((((x10)*(((x41)+(((IkReal(-1.00000000000000))*(x19)*(x52)))))))+(((x11)*(x67))));
eerot[2]=((((x13)*(x68)))+(((x12)*(((x70)+(x66))))));
IkReal x72=((IkReal(1.00000000000000))*(x31));
eetrans[0]=((IkReal(0.00100000000000000))+(((x10)*(((((x20)*(x52)))+(((IkReal(-1.00000000000000))*(x21)*(x72)))))))+(((IkReal(-1.00000000000000))*(x25)*(x72)))+(((IkReal(-1.00000000000000))*(x54)*(x7)))+(((IkReal(-0.300000000000000))*(x31)))+(x54)+(((IkReal(0.0300000000000000))*(x31)*(x5)))+(((x5)*(((((IkReal(-0.313800000000000))*(x27)))+(((IkReal(-1.00000000000000))*(x24)*(x30)))))))+(((x11)*(((((IkReal(-1.00000000000000))*(x14)*(x59)))+(((IkReal(-1.00000000000000))*(x26)*(x46))))))));
eerot[3]=((((x12)*(x64)))+(((x13)*(((((IkReal(-1.00000000000000))*(x22)*(x48)))+(((IkReal(-1.00000000000000))*(x65))))))));
eerot[4]=((((x10)*(((((IkReal(-1.00000000000000))*(x2)*(x23)))+(x43)))))+(((x11)*(x60))));
eerot[5]=((((x13)*(x64)))+(((x12)*(((((x11)*(x48)))+(x65))))));
eetrans[1]=((IkReal(0.229500000000000))+(((x11)*(((((IkReal(-1.00000000000000))*(x14)*(x49)))+(((IkReal(-1.00000000000000))*(x26)*(x32)))))))+(((IkReal(-1.00000000000000))*(x18)*(x5)))+(((IkReal(0.0300000000000000))*(x33)))+(((IkReal(-0.0300000000000000))*(x38)))+(((IkReal(-0.313800000000000))*(x33)*(x5)))+(((IkReal(0.300000000000000))*(x2)))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x33)))+(((x2)*(x21)))))))+(((x24)*(x7))));
eerot[6]=((((IkReal(-1.00000000000000))*(x12)*(((((x16)*(x53)))+(((x15)*(((((IkReal(-1.00000000000000))*(x19)*(x34)))+(((IkReal(-1.00000000000000))*(x23)*(x50)))))))))))+(((x13)*(((((x11)*(x62)))+(x71))))));
eerot[7]=((((x11)*(((((IkReal(-1.00000000000000))*(x15)*(x53)))+(((IkReal(-1.00000000000000))*(x16)*(x61)))))))+(((x10)*(x62))));
eerot[8]=((((x12)*(((((IkReal(-1.00000000000000))*(x71)))+(((IkReal(-1.00000000000000))*(x22)*(x62)))))))+(((IkReal(-1.00000000000000))*(x13)*(((((IkReal(1.00000000000000))*(x53)*(x9)))+(((IkReal(1.00000000000000))*(x8)*(((((IkReal(-1.00000000000000))*(x39)))+(((IkReal(-1.00000000000000))*(x55))))))))))));
IkReal x73=((IkReal(1.00000000000000))*(x34));
eetrans[2]=((IkReal(0.206100000000000))+(((IkReal(-1.00000000000000))*(x37)))+(((x11)*(((((x26)*(x53)))+(((x14)*(x61)))))))+(((IkReal(0.0300000000000000))*(x39)))+(((IkReal(-1.00000000000000))*(x25)*(x73)))+(((IkReal(-0.300000000000000))*(x34)))+(x45)+(((x7)*(((((IkReal(-1.00000000000000))*(x45)))+(x37)))))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x51)))+(((IkReal(-1.00000000000000))*(x21)*(x73)))))))+(((x5)*(((((IkReal(-1.00000000000000))*(x24)*(x35)))+(((IkReal(0.313800000000000))*(x29))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=r00;
new_r02=r01;
new_px=((IkReal(-0.00100000000000000))+(px)+(((IkReal(0.118000000000000))*(r01))));
new_r10=((IkReal(-1.00000000000000))*(r22));
new_r11=((IkReal(-1.00000000000000))*(r20));
new_r12=((IkReal(-1.00000000000000))*(r21));
new_py=((IkReal(0.206100000000000))+(((IkReal(-0.118000000000000))*(r21)))+(((IkReal(-1.00000000000000))*(pz))));
new_r20=r12;
new_r21=r10;
new_r22=r11;
new_pz=((IkReal(-0.229500000000000))+(((IkReal(0.118000000000000))*(r11)))+(py));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x74=IKasin(((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp)))));
j3array[0]=((IkReal(-1.76577759872331))+(((IkReal(-1.00000000000000))*(x74))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(1.37581505486648))+(x74));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x75=(sj2)*(sj2);
IkReal x76=(sj3)*(sj3);
IkReal x77=(cj3)*(cj3);
IkReal x78=((IkReal(20.9200000000000))*(sj3));
IkReal x79=((cj3)*(x75));
dummyeval[0]=((IkReal(100.000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(x78)))+(((x78)*(x79)))+(((IkReal(-20.0000000000000))*(sj3)))+(((x75)*(x77)))+(((IkReal(-2.00000000000000))*(x79)))+(x76)+(x75)+(((IkReal(109.411600000000))*(x75)*(x76)))+(((IkReal(109.411600000000))*(x77)))+(((IkReal(209.200000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x75)*(x78))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x80=((IkReal(0.0300000000000000))*(sj2));
IkReal x81=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3))));
IkReal x82=((((IkReal(-0.313800000000000))*(sj2)*(sj3)))+(x80)+(((IkReal(-1.00000000000000))*(cj3)*(x80))));
if( IKabs(x82) < IKFAST_ATAN2_MAGTHRESH && IKabs(x81) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x83=((IkReal(1.00000000000000))*(IKatan2(x82, x81)));
if( ((((x81)*(x81))+((x82)*(x82)))) < (IkReal)-0.00001 )
    continue;
if( (((pz)*(((IKabs(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((pz)*(((IKabs(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x84=IKasin(((pz)*(((IKabs(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82))))))):(IkReal)1.0e30))));
j1array[0]=((x84)+(((IkReal(-1.00000000000000))*(x83))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x84)))+(((IkReal(-1.00000000000000))*(x83))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((cj1)*((px)*(px))))+(((cj1)*((py)*(py))))));
dummyeval[0]=((((cj1)*((px)*(px))))+(((cj1)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x85=((cj2)*(sj1));
gconst1=IKsign(((((x85)*((px)*(px))))+(((x85)*((py)*(py))))));
IkReal x86=((cj2)*(sj1));
dummyeval[0]=((((x86)*((px)*(px))))+(((x86)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x87=((IkReal(0.0300000000000000))*(cj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)))+(x87)+(((IkReal(0.313800000000000))*(cj3)*(sj1)))+(((IkReal(0.300000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(cj3)*(x87)))+(((IkReal(-0.0300000000000000))*(sj1)*(sj3)))+(((IkReal(-0.313800000000000))*(cj1)*(sj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((cj1)*((px)*(px))))+(((cj1)*((py)*(py))))));
dummyeval[0]=((((cj1)*((px)*(px))))+(((cj1)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x88=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=x88;
evalcond[3]=x88;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x89=((IkReal(5.00000000000000))*(pp));
IkReal x90=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst5)*(((((IkReal(0.0423522000000000))*(px)))+(((px)*(x90)))+(((IkReal(-1.00000000000000))*(px)*(x89))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x89)))+(((IkReal(-1.00000000000000))*(py)*(x90))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst5)*(((((IkReal(0.0423522000000000))*(px)))+(((px)*(x90)))+(((IkReal(-1.00000000000000))*(px)*(x89)))))), ((gconst5)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x89)))+(((IkReal(-1.00000000000000))*(py)*(x90)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x91=IKsin(j0);
IkReal x92=IKcos(j0);
IkReal x93=((px)*(x91));
IkReal x94=((IkReal(1.00000000000000))*(x92));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x91)))+(((IkReal(-1.00000000000000))*(px)*(x94))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(x93)+(((IkReal(-1.00000000000000))*(py)*(x94))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(py)*(x92)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(pz)))+(((IkReal(-0.600000000000000))*(x93))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x256=((IkReal(0.313800000000000))*(cj3));
IkReal x257=((IkReal(0.0300000000000000))*(sj3));
if( IKabs(((gconst4)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x256)))+(((IkReal(-1.00000000000000))*(px)*(x257))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x257)))+(((IkReal(-1.00000000000000))*(py)*(x256))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst4)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x256)))+(((IkReal(-1.00000000000000))*(px)*(x257)))))), ((gconst4)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x257)))+(((IkReal(-1.00000000000000))*(py)*(x256)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x258=IKsin(j0);
IkReal x259=IKcos(j0);
IkReal x260=((px)*(x258));
IkReal x261=((IkReal(1.00000000000000))*(x259));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x258)))+(((IkReal(-1.00000000000000))*(px)*(x261))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(x260)+(((IkReal(-1.00000000000000))*(py)*(x261))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(py)*(x259)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x260)))+(((IkReal(0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x262=((IkReal(0.0300000000000000))*(cj3));
IkReal x263=((IkReal(0.313800000000000))*(sj3));
IkReal x264=((x263)+(x262));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(x264));
evalcond[3]=((IkReal(0.0300000000000000))+(pz)+(((IkReal(-1.00000000000000))*(x264))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x265=((IkReal(5.00000000000000))*(pp));
IkReal x266=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst7)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x265)))+(((IkReal(-1.00000000000000))*(px)*(x266))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x265)))+(((py)*(x266))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst7)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x265)))+(((IkReal(-1.00000000000000))*(px)*(x266)))))), ((gconst7)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x265)))+(((py)*(x266)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x267=IKcos(j0);
IkReal x268=IKsin(j0);
IkReal x269=((IkReal(1.00000000000000))*(px));
IkReal x270=((py)*(x267));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x268)))+(((IkReal(-1.00000000000000))*(x267)*(x269))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(x270)+(((IkReal(-1.00000000000000))*(x268)*(x269))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(px)*(x268)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(-0.600000000000000))*(x270))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x271=((IkReal(0.313800000000000))*(cj3));
IkReal x272=((IkReal(0.0300000000000000))*(sj3));
if( IKabs(((gconst6)*(((((px)*(x271)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x272))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x272)))+(((IkReal(-1.00000000000000))*(py)*(x271))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst6)*(((((px)*(x271)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x272)))))), ((gconst6)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x272)))+(((IkReal(-1.00000000000000))*(py)*(x271)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x273=IKcos(j0);
IkReal x274=IKsin(j0);
IkReal x275=((IkReal(1.00000000000000))*(px));
IkReal x276=((py)*(x273));
evalcond[0]=((((IkReal(-1.00000000000000))*(x273)*(x275)))+(((IkReal(-1.00000000000000))*(py)*(x274))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x274)*(x275)))+(((IkReal(0.313800000000000))*(cj3)))+(x276));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(px)*(x274)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(-0.600000000000000))*(x276))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x277=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=x277;
evalcond[3]=x277;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x278=((IkReal(50.0000000000000))*(pp));
IkReal x279=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst9)*(((((IkReal(0.423522000000000))*(px)))+(((px)*(x279)))+(((IkReal(-1.00000000000000))*(px)*(x278))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((py)*(x278)))+(((IkReal(-0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x279))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst9)*(((((IkReal(0.423522000000000))*(px)))+(((px)*(x279)))+(((IkReal(-1.00000000000000))*(px)*(x278)))))), ((gconst9)*(((((py)*(x278)))+(((IkReal(-0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x279)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x280=IKcos(j0);
IkReal x281=IKsin(j0);
IkReal x282=((IkReal(1.00000000000000))*(px));
IkReal x283=((py)*(x280));
evalcond[0]=((((IkReal(-1.00000000000000))*(x280)*(x282)))+(((IkReal(-1.00000000000000))*(py)*(x281))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x281)*(x282)))+(x283)+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x283)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(px)*(x281))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x284=((IkReal(0.313800000000000))*(sj3));
IkReal x285=((IkReal(0.0300000000000000))*(px));
IkReal x286=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(cj3)*(x285)))+(((IkReal(-1.00000000000000))*(px)*(x284)))+(x285))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((cj3)*(x286)))+(((IkReal(-1.00000000000000))*(x286)))+(((py)*(x284))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst8)*(((((IkReal(-1.00000000000000))*(cj3)*(x285)))+(((IkReal(-1.00000000000000))*(px)*(x284)))+(x285)))), ((gconst8)*(((((cj3)*(x286)))+(((IkReal(-1.00000000000000))*(x286)))+(((py)*(x284)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x287=IKcos(j0);
IkReal x288=IKsin(j0);
IkReal x289=((IkReal(1.00000000000000))*(px));
IkReal x290=((py)*(x287));
evalcond[0]=((((IkReal(-1.00000000000000))*(x287)*(x289)))+(((IkReal(-1.00000000000000))*(py)*(x288))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x288)*(x289)))+(x290)+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x290)))+(((IkReal(0.0600000000000000))*(px)*(x288))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x291=((IkReal(0.0300000000000000))*(sj3));
IkReal x292=((IkReal(0.313800000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x291)))+(x292)+(pz));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(x292)))+(((IkReal(-1.00000000000000))*(pz)))+(x291));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x293=((IkReal(50.0000000000000))*(pp));
IkReal x294=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst11)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x294)))+(((IkReal(-1.00000000000000))*(px)*(x293))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((py)*(x294)))+(((py)*(x293)))+(((IkReal(-0.423522000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst11)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x294)))+(((IkReal(-1.00000000000000))*(px)*(x293)))))), ((gconst11)*(((((py)*(x294)))+(((py)*(x293)))+(((IkReal(-0.423522000000000))*(py)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x295=IKsin(j0);
IkReal x296=IKcos(j0);
IkReal x297=((px)*(x295));
IkReal x298=((IkReal(1.00000000000000))*(x296));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x295)))+(((IkReal(-1.00000000000000))*(px)*(x298))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(py)*(x298)))+(x297)+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(py)*(x296)))+(((IkReal(-0.0600000000000000))*(x297))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x299=((IkReal(0.313800000000000))*(sj3));
IkReal x300=((IkReal(0.0300000000000000))*(px));
IkReal x301=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(cj3)*(x300)))+(x300)+(((IkReal(-1.00000000000000))*(px)*(x299))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((py)*(x299)))+(((cj3)*(x301)))+(((IkReal(-1.00000000000000))*(x301))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst10)*(((((IkReal(-1.00000000000000))*(cj3)*(x300)))+(x300)+(((IkReal(-1.00000000000000))*(px)*(x299)))))), ((gconst10)*(((((py)*(x299)))+(((cj3)*(x301)))+(((IkReal(-1.00000000000000))*(x301)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x302=IKsin(j0);
IkReal x303=IKcos(j0);
IkReal x304=((px)*(x302));
IkReal x305=((IkReal(1.00000000000000))*(x303));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x305)))+(((IkReal(-1.00000000000000))*(py)*(x302))));
evalcond[1]=((IkReal(0.0300000000000000))+(x304)+(((IkReal(-1.00000000000000))*(py)*(x305)))+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(py)*(x303)))+(((IkReal(-0.0600000000000000))*(x304)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x306=((IkReal(0.313800000000000))*(sj3));
IkReal x307=((cj1)*(pz));
IkReal x308=((IkReal(0.0300000000000000))*(px));
IkReal x309=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(cj3)*(x308)))+(((IkReal(-1.00000000000000))*(px)*(x306)))+(((IkReal(-1.00000000000000))*(px)*(x307)))+(x308))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((cj3)*(x309)))+(((py)*(x307)))+(((py)*(x306)))+(((IkReal(-1.00000000000000))*(x309))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(cj3)*(x308)))+(((IkReal(-1.00000000000000))*(px)*(x306)))+(((IkReal(-1.00000000000000))*(px)*(x307)))+(x308)))), ((gconst3)*(((((cj3)*(x309)))+(((py)*(x307)))+(((py)*(x306)))+(((IkReal(-1.00000000000000))*(x309)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x310=IKsin(j0);
IkReal x311=IKcos(j0);
IkReal x312=((IkReal(0.0300000000000000))*(sj1));
IkReal x313=((IkReal(0.313800000000000))*(sj3));
IkReal x314=((IkReal(0.0600000000000000))*(sj1));
IkReal x315=((IkReal(0.0300000000000000))*(sj3));
IkReal x316=((IkReal(0.313800000000000))*(cj3));
IkReal x317=((IkReal(1.00000000000000))*(pz));
IkReal x318=((IkReal(0.600000000000000))*(cj1));
IkReal x319=((px)*(x310));
IkReal x320=((IkReal(1.00000000000000))*(x311));
IkReal x321=((py)*(x311));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x320)))+(((IkReal(-1.00000000000000))*(py)*(x310))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x317)))+(((cj1)*(x319)))+(x316)+(((IkReal(-1.00000000000000))*(x315)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x320))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x319)))+(((IkReal(-1.00000000000000))*(x313)))+(((sj1)*(x321)))+(((IkReal(-1.00000000000000))*(cj1)*(x317)))+(((IkReal(-0.0300000000000000))*(cj3))));
evalcond[3]=((((cj1)*(x316)))+(((sj1)*(x313)))+(x319)+(((IkReal(-1.00000000000000))*(x312)))+(((IkReal(-1.00000000000000))*(cj1)*(x315)))+(((cj3)*(x312)))+(((IkReal(0.300000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(py)*(x320))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x318)*(x321)))+(((IkReal(-1.00000000000000))*(x314)*(x321)))+(((IkReal(0.0600000000000000))*(cj1)*(pz)))+(((IkReal(0.600000000000000))*(pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x318)*(x319)))+(((IkReal(-1.00000000000000))*(pp)))+(((x314)*(x319))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x322=((IkReal(0.0300000000000000))*(sj3));
IkReal x323=((pz)*(sj1));
IkReal x324=((IkReal(0.313800000000000))*(cj3));
if( IKabs(((gconst2)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x324)))+(((px)*(x323)))+(((px)*(x322))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(py)*(x323)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x324)))+(((IkReal(-1.00000000000000))*(py)*(x322))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst2)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x324)))+(((px)*(x323)))+(((px)*(x322)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(py)*(x323)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x324)))+(((IkReal(-1.00000000000000))*(py)*(x322)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x325=IKsin(j0);
IkReal x326=IKcos(j0);
IkReal x327=((IkReal(0.0300000000000000))*(sj1));
IkReal x328=((IkReal(0.313800000000000))*(sj3));
IkReal x329=((IkReal(0.0600000000000000))*(sj1));
IkReal x330=((IkReal(0.0300000000000000))*(sj3));
IkReal x331=((IkReal(0.313800000000000))*(cj3));
IkReal x332=((IkReal(1.00000000000000))*(pz));
IkReal x333=((IkReal(0.600000000000000))*(cj1));
IkReal x334=((px)*(x325));
IkReal x335=((IkReal(1.00000000000000))*(x326));
IkReal x336=((py)*(x326));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x335)))+(((IkReal(-1.00000000000000))*(py)*(x325))));
evalcond[1]=((IkReal(0.300000000000000))+(((cj1)*(x334)))+(x331)+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x335)))+(((IkReal(-1.00000000000000))*(x330)))+(((IkReal(-1.00000000000000))*(sj1)*(x332))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x334)))+(((IkReal(-1.00000000000000))*(x328)))+(((IkReal(-1.00000000000000))*(cj1)*(x332)))+(((IkReal(-0.0300000000000000))*(cj3)))+(((sj1)*(x336))));
evalcond[3]=((((cj1)*(x331)))+(((IkReal(-1.00000000000000))*(x327)))+(((IkReal(-1.00000000000000))*(py)*(x335)))+(x334)+(((sj1)*(x328)))+(((IkReal(0.300000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x330)))+(((cj3)*(x327))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x333)*(x334)))+(((IkReal(0.0600000000000000))*(cj1)*(pz)))+(((IkReal(-1.00000000000000))*(x329)*(x336)))+(((IkReal(0.600000000000000))*(pz)*(sj1)))+(((IkReal(-1.00000000000000))*(pp)))+(((x329)*(x334)))+(((x333)*(x336))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x337=((IkReal(0.0300000000000000))*(cj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=((((cj3)*(x337)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.313800000000000))*(cj1)*(sj3)))+(((IkReal(0.313800000000000))*(cj3)*(sj1)))+(((IkReal(-1.00000000000000))*(x337)))+(((IkReal(0.300000000000000))*(sj1)))+(((IkReal(-0.0300000000000000))*(sj1)*(sj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((cj1)*((px)*(px))))+(((cj1)*((py)*(py))))));
dummyeval[0]=((((cj1)*((px)*(px))))+(((cj1)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x338=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=x338;
evalcond[3]=x338;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x339=((IkReal(50.0000000000000))*(pp));
IkReal x340=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x339)))+(((IkReal(0.423522000000000))*(px)))+(((px)*(x340))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((py)*(x339)))+(((IkReal(-0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x340))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x339)))+(((IkReal(0.423522000000000))*(px)))+(((px)*(x340)))))), ((gconst15)*(((((py)*(x339)))+(((IkReal(-0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x340)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x341=IKsin(j0);
IkReal x342=IKcos(j0);
IkReal x343=((px)*(x341));
IkReal x344=((IkReal(1.00000000000000))*(x342));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x344)))+(((IkReal(-1.00000000000000))*(py)*(x341))));
evalcond[1]=((IkReal(0.0300000000000000))+(x343)+(((IkReal(-1.00000000000000))*(py)*(x344)))+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x343)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(py)*(x342))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x345=((IkReal(0.313800000000000))*(sj3));
IkReal x346=((IkReal(0.0300000000000000))*(px));
IkReal x347=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(cj3)*(x346)))+(((IkReal(-1.00000000000000))*(px)*(x345)))+(x346))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((py)*(x345)))+(((IkReal(-1.00000000000000))*(x347)))+(((cj3)*(x347))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst14)*(((((IkReal(-1.00000000000000))*(cj3)*(x346)))+(((IkReal(-1.00000000000000))*(px)*(x345)))+(x346)))), ((gconst14)*(((((py)*(x345)))+(((IkReal(-1.00000000000000))*(x347)))+(((cj3)*(x347)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x348=IKsin(j0);
IkReal x349=IKcos(j0);
IkReal x350=((px)*(x348));
IkReal x351=((IkReal(1.00000000000000))*(x349));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x351)))+(((IkReal(-1.00000000000000))*(py)*(x348))));
evalcond[1]=((IkReal(0.0300000000000000))+(x350)+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x351)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x350)))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(py)*(x349))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x352=((IkReal(0.0300000000000000))*(sj3));
IkReal x353=((IkReal(0.313800000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x352)))+(x353)+(pz));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(x353)))+(x352)+(((IkReal(-1.00000000000000))*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x354=((IkReal(50.0000000000000))*(pp));
IkReal x355=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst17)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x354)))+(((IkReal(-1.00000000000000))*(px)*(x355))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((py)*(x354)))+(((py)*(x355)))+(((IkReal(-0.423522000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst17)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x354)))+(((IkReal(-1.00000000000000))*(px)*(x355)))))), ((gconst17)*(((((py)*(x354)))+(((py)*(x355)))+(((IkReal(-0.423522000000000))*(py)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x356=IKcos(j0);
IkReal x357=IKsin(j0);
IkReal x358=((IkReal(1.00000000000000))*(px));
IkReal x359=((py)*(x356));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x357)))+(((IkReal(-1.00000000000000))*(x356)*(x358))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x357)*(x358)))+(x359)+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x359)))+(((IkReal(0.0600000000000000))*(px)*(x357)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x360=((IkReal(0.313800000000000))*(sj3));
IkReal x361=((IkReal(0.0300000000000000))*(px));
IkReal x362=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst16)*(((x361)+(((IkReal(-1.00000000000000))*(cj3)*(x361)))+(((IkReal(-1.00000000000000))*(px)*(x360))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(x362)))+(((py)*(x360)))+(((cj3)*(x362))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst16)*(((x361)+(((IkReal(-1.00000000000000))*(cj3)*(x361)))+(((IkReal(-1.00000000000000))*(px)*(x360)))))), ((gconst16)*(((((IkReal(-1.00000000000000))*(x362)))+(((py)*(x360)))+(((cj3)*(x362)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x363=IKcos(j0);
IkReal x364=IKsin(j0);
IkReal x365=((IkReal(1.00000000000000))*(px));
IkReal x366=((py)*(x363));
evalcond[0]=((((IkReal(-1.00000000000000))*(x363)*(x365)))+(((IkReal(-1.00000000000000))*(py)*(x364))));
evalcond[1]=((IkReal(0.0300000000000000))+(x366)+(((IkReal(-1.00000000000000))*(x364)*(x365)))+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(px)*(x364)))+(((IkReal(-0.0600000000000000))*(x366))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x367=((IkReal(0.0300000000000000))*(cj3));
IkReal x368=((IkReal(0.313800000000000))*(sj3));
IkReal x369=((x368)+(x367));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=((IkReal(-0.0300000000000000))+(x369)+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x369)))+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x370=((IkReal(5.00000000000000))*(pp));
IkReal x371=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst19)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x370)))+(((IkReal(-1.00000000000000))*(px)*(x371))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x370)))+(((py)*(x371))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst19)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x370)))+(((IkReal(-1.00000000000000))*(px)*(x371)))))), ((gconst19)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x370)))+(((py)*(x371)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x372=IKsin(j0);
IkReal x373=IKcos(j0);
IkReal x374=((px)*(x372));
IkReal x375=((IkReal(1.00000000000000))*(x373));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x372)))+(((IkReal(-1.00000000000000))*(px)*(x375))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(x374)+(((IkReal(-1.00000000000000))*(py)*(x375))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x374)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(py)*(x373))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x376=((IkReal(0.313800000000000))*(cj3));
IkReal x377=((IkReal(0.0300000000000000))*(sj3));
if( IKabs(((gconst18)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x376)))+(((IkReal(-1.00000000000000))*(px)*(x377))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x377)))+(((IkReal(-1.00000000000000))*(py)*(x376))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst18)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x376)))+(((IkReal(-1.00000000000000))*(px)*(x377)))))), ((gconst18)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x377)))+(((IkReal(-1.00000000000000))*(py)*(x376)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x378=IKsin(j0);
IkReal x379=IKcos(j0);
IkReal x380=((px)*(x378));
IkReal x381=((IkReal(1.00000000000000))*(x379));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x378)))+(((IkReal(-1.00000000000000))*(px)*(x381))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(py)*(x381)))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(x380));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(py)*(x379)))+(((IkReal(-0.600000000000000))*(x380))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x382=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=x382;
evalcond[3]=x382;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x383=((IkReal(5.00000000000000))*(pp));
IkReal x384=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst21)*(((((px)*(x384)))+(((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x383))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(py)*(x384)))+(((IkReal(-0.0423522000000000))*(py)))+(((py)*(x383))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst21)*(((((px)*(x384)))+(((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x383)))))), ((gconst21)*(((((IkReal(-1.00000000000000))*(py)*(x384)))+(((IkReal(-0.0423522000000000))*(py)))+(((py)*(x383)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x385=IKcos(j0);
IkReal x386=IKsin(j0);
IkReal x387=((IkReal(1.00000000000000))*(px));
IkReal x388=((py)*(x385));
evalcond[0]=((((IkReal(-1.00000000000000))*(x385)*(x387)))+(((IkReal(-1.00000000000000))*(py)*(x386))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(x388)+(((IkReal(-1.00000000000000))*(x386)*(x387))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(px)*(x386)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x388)))+(((IkReal(0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x389=((IkReal(0.313800000000000))*(cj3));
IkReal x390=((IkReal(0.0300000000000000))*(sj3));
if( IKabs(((gconst20)*(((((px)*(x389)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x390))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(py)*(x389)))+(((IkReal(-0.300000000000000))*(py)))+(((py)*(x390))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst20)*(((((px)*(x389)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x390)))))), ((gconst20)*(((((IkReal(-1.00000000000000))*(py)*(x389)))+(((IkReal(-0.300000000000000))*(py)))+(((py)*(x390)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x391=IKcos(j0);
IkReal x392=IKsin(j0);
IkReal x393=((IkReal(1.00000000000000))*(px));
IkReal x394=((py)*(x391));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x392)))+(((IkReal(-1.00000000000000))*(x391)*(x393))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(x394)+(((IkReal(-1.00000000000000))*(x392)*(x393))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x394)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(px)*(x392)))+(((IkReal(0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x395=((IkReal(0.0300000000000000))*(sj3));
IkReal x396=((pz)*(sj1));
IkReal x397=((IkReal(0.313800000000000))*(cj3));
if( IKabs(((gconst13)*(((((IkReal(-0.300000000000000))*(px)))+(((px)*(x395)))+(((px)*(x396)))+(((IkReal(-1.00000000000000))*(px)*(x397))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(py)*(x396)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x397)))+(((IkReal(-1.00000000000000))*(py)*(x395))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst13)*(((((IkReal(-0.300000000000000))*(px)))+(((px)*(x395)))+(((px)*(x396)))+(((IkReal(-1.00000000000000))*(px)*(x397)))))), ((gconst13)*(((((IkReal(-1.00000000000000))*(py)*(x396)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x397)))+(((IkReal(-1.00000000000000))*(py)*(x395)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x398=IKsin(j0);
IkReal x399=IKcos(j0);
IkReal x400=((IkReal(0.0300000000000000))*(sj1));
IkReal x401=((IkReal(0.313800000000000))*(sj3));
IkReal x402=((IkReal(0.0600000000000000))*(sj1));
IkReal x403=((IkReal(0.0300000000000000))*(sj3));
IkReal x404=((IkReal(0.313800000000000))*(cj3));
IkReal x405=((pz)*(sj1));
IkReal x406=((IkReal(0.600000000000000))*(cj1));
IkReal x407=((cj1)*(pz));
IkReal x408=((px)*(x398));
IkReal x409=((IkReal(1.00000000000000))*(x399));
IkReal x410=((py)*(x399));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x409)))+(((IkReal(-1.00000000000000))*(py)*(x398))));
evalcond[1]=((IkReal(0.300000000000000))+(x404)+(((cj1)*(x408)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x409)))+(((IkReal(-1.00000000000000))*(x405)))+(((IkReal(-1.00000000000000))*(x403))));
evalcond[2]=((IkReal(0.0300000000000000))+(((sj1)*(x408)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x409)))+(x407)+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x401))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x403)))+(((IkReal(-1.00000000000000))*(cj3)*(x400)))+(x400)+(x408)+(((IkReal(0.300000000000000))*(cj1)))+(((cj1)*(x404)))+(((IkReal(-1.00000000000000))*(py)*(x409)))+(((IkReal(-1.00000000000000))*(sj1)*(x401))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x407)))+(((IkReal(-1.00000000000000))*(x406)*(x408)))+(((IkReal(-1.00000000000000))*(x402)*(x408)))+(((x406)*(x410)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x405)))+(((x402)*(x410))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x411=((IkReal(0.313800000000000))*(sj3));
IkReal x412=((cj1)*(pz));
IkReal x413=((IkReal(0.0300000000000000))*(px));
IkReal x414=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst12)*(((((px)*(x411)))+(((IkReal(-1.00000000000000))*(px)*(x412)))+(((IkReal(-1.00000000000000))*(x413)))+(((cj3)*(x413))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((py)*(x412)))+(((IkReal(-1.00000000000000))*(cj3)*(x414)))+(x414)+(((IkReal(-1.00000000000000))*(py)*(x411))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst12)*(((((px)*(x411)))+(((IkReal(-1.00000000000000))*(px)*(x412)))+(((IkReal(-1.00000000000000))*(x413)))+(((cj3)*(x413)))))), ((gconst12)*(((((py)*(x412)))+(((IkReal(-1.00000000000000))*(cj3)*(x414)))+(x414)+(((IkReal(-1.00000000000000))*(py)*(x411)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x415=IKsin(j0);
IkReal x416=IKcos(j0);
IkReal x417=((IkReal(0.0300000000000000))*(sj1));
IkReal x418=((IkReal(0.313800000000000))*(sj3));
IkReal x419=((IkReal(0.0600000000000000))*(sj1));
IkReal x420=((IkReal(0.0300000000000000))*(sj3));
IkReal x421=((IkReal(0.313800000000000))*(cj3));
IkReal x422=((pz)*(sj1));
IkReal x423=((IkReal(0.600000000000000))*(cj1));
IkReal x424=((cj1)*(pz));
IkReal x425=((px)*(x415));
IkReal x426=((IkReal(1.00000000000000))*(x416));
IkReal x427=((py)*(x416));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x415)))+(((IkReal(-1.00000000000000))*(px)*(x426))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x422)))+(((IkReal(-1.00000000000000))*(x420)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x426)))+(x421)+(((cj1)*(x425))));
evalcond[2]=((IkReal(0.0300000000000000))+(x424)+(((IkReal(-1.00000000000000))*(x418)))+(((sj1)*(x425)))+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x426))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x420)))+(((IkReal(-1.00000000000000))*(cj3)*(x417)))+(x417)+(x425)+(((IkReal(0.300000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(sj1)*(x418)))+(((IkReal(-1.00000000000000))*(py)*(x426)))+(((cj1)*(x421))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x419)*(x427)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x419)*(x425)))+(((x423)*(x427)))+(((IkReal(0.600000000000000))*(x422)))+(((IkReal(-1.00000000000000))*(x423)*(x425)))+(((IkReal(-0.0600000000000000))*(x424))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x428=((IkReal(0.0300000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.313800000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x428)))+(((IkReal(-1.00000000000000))*(pz)))+(x428));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign(((((sj2)*((px)*(px))))+(((sj2)*((py)*(py))))));
dummyeval[0]=((((sj2)*((px)*(px))))+(((sj2)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x429=((IkReal(-1.00000000000000))*(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=x429;
evalcond[3]=x429;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((IkReal(-0.0600000000000000))*((px)*(px))))+(((IkReal(-0.0600000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x430=((py)*(sj3));
IkReal x431=((IkReal(0.188280000000000))*(cj3));
IkReal x432=((IkReal(1.00000000000000))*(pp));
IkReal x433=((IkReal(0.0180000000000000))*(px));
IkReal x434=((IkReal(0.0188280000000000))*(cj3));
if( IKabs(((gconst25)*(((((px)*(x434)))+(((py)*(x431)))+(x433)+(((IkReal(-0.0180000000000000))*(x430)))+(((IkReal(-1.00000000000000))*(py)*(x432)))+(((IkReal(-0.00180000000000000))*(px)*(sj3)))+(((IkReal(0.188470440000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((IkReal(-1.00000000000000))*(sj3)*(x433)))+(((px)*(x431)))+(((IkReal(0.00180000000000000))*(x430)))+(((IkReal(-0.0180000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x434)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x432))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst25)*(((((px)*(x434)))+(((py)*(x431)))+(x433)+(((IkReal(-0.0180000000000000))*(x430)))+(((IkReal(-1.00000000000000))*(py)*(x432)))+(((IkReal(-0.00180000000000000))*(px)*(sj3)))+(((IkReal(0.188470440000000))*(py)))))), ((gconst25)*(((((IkReal(-1.00000000000000))*(sj3)*(x433)))+(((px)*(x431)))+(((IkReal(0.00180000000000000))*(x430)))+(((IkReal(-0.0180000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x434)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x432)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x435=IKsin(j0);
IkReal x436=IKcos(j0);
IkReal x437=((IkReal(1.00000000000000))*(py));
IkReal x438=((px)*(x435));
IkReal x439=((px)*(x436));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x439)))+(((IkReal(-1.00000000000000))*(x435)*(x437)))+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x436)*(x437)))+(x438));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(py)*(x435)))+(((IkReal(-0.600000000000000))*(x438)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x439)))+(((IkReal(0.600000000000000))*(py)*(x436))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x440=((IkReal(0.313800000000000))*(sj3));
IkReal x441=((IkReal(0.0300000000000000))*(sj3));
IkReal x442=((IkReal(0.0300000000000000))*(px));
IkReal x443=((IkReal(0.313800000000000))*(cj3));
IkReal x444=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst24)*(((((IkReal(-1.00000000000000))*(cj3)*(x444)))+(((IkReal(-0.300000000000000))*(px)))+(((px)*(x441)))+(x444)+(((IkReal(-1.00000000000000))*(py)*(x440)))+(((IkReal(-1.00000000000000))*(px)*(x443))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((IkReal(-1.00000000000000))*(cj3)*(x442)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x443)))+(x442)+(((IkReal(-1.00000000000000))*(py)*(x441)))+(((IkReal(-1.00000000000000))*(px)*(x440))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst24)*(((((IkReal(-1.00000000000000))*(cj3)*(x444)))+(((IkReal(-0.300000000000000))*(px)))+(((px)*(x441)))+(x444)+(((IkReal(-1.00000000000000))*(py)*(x440)))+(((IkReal(-1.00000000000000))*(px)*(x443)))))), ((gconst24)*(((((IkReal(-1.00000000000000))*(cj3)*(x442)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x443)))+(x442)+(((IkReal(-1.00000000000000))*(py)*(x441)))+(((IkReal(-1.00000000000000))*(px)*(x440)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x445=IKsin(j0);
IkReal x446=IKcos(j0);
IkReal x447=((IkReal(1.00000000000000))*(py));
IkReal x448=((px)*(x445));
IkReal x449=((px)*(x446));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x445)*(x447)))+(((IkReal(-1.00000000000000))*(x449)))+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(x448)+(((IkReal(-1.00000000000000))*(x446)*(x447))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x448)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x449)))+(((IkReal(0.600000000000000))*(py)*(x446)))+(((IkReal(0.0600000000000000))*(py)*(x445))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=pz;
evalcond[3]=((IkReal(-1.00000000000000))*(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((IkReal(0.0600000000000000))*((py)*(py))))+(((IkReal(0.0600000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x450=((py)*(sj3));
IkReal x451=((IkReal(0.188280000000000))*(cj3));
IkReal x452=((IkReal(1.00000000000000))*(pp));
IkReal x453=((IkReal(0.0180000000000000))*(px));
IkReal x454=((IkReal(0.0188280000000000))*(cj3));
if( IKabs(((gconst27)*(((((IkReal(-0.0180000000000000))*(x450)))+(((IkReal(-1.00000000000000))*(x453)))+(((IkReal(0.00180000000000000))*(px)*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x452)))+(((IkReal(0.188470440000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x454)))+(((py)*(x451))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst27)*(((((IkReal(0.0180000000000000))*(py)))+(((IkReal(-0.00180000000000000))*(x450)))+(((IkReal(-1.00000000000000))*(sj3)*(x453)))+(((px)*(x451)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x452)))+(((py)*(x454))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst27)*(((((IkReal(-0.0180000000000000))*(x450)))+(((IkReal(-1.00000000000000))*(x453)))+(((IkReal(0.00180000000000000))*(px)*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x452)))+(((IkReal(0.188470440000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x454)))+(((py)*(x451)))))), ((gconst27)*(((((IkReal(0.0180000000000000))*(py)))+(((IkReal(-0.00180000000000000))*(x450)))+(((IkReal(-1.00000000000000))*(sj3)*(x453)))+(((px)*(x451)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x452)))+(((py)*(x454)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x455=IKsin(j0);
IkReal x456=IKcos(j0);
IkReal x457=((IkReal(1.00000000000000))*(py));
IkReal x458=((px)*(x455));
IkReal x459=((px)*(x456));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x459)))+(((IkReal(0.0300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x455)*(x457)))+(((IkReal(0.313800000000000))*(sj3))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x456)*(x457)))+(x458));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x458)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x459)))+(((IkReal(-0.0600000000000000))*(py)*(x455)))+(((IkReal(0.600000000000000))*(py)*(x456))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x460=((IkReal(0.313800000000000))*(sj3));
IkReal x461=((IkReal(0.0300000000000000))*(sj3));
IkReal x462=((IkReal(0.0300000000000000))*(px));
IkReal x463=((IkReal(0.313800000000000))*(cj3));
IkReal x464=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst26)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(x464)))+(((cj3)*(x464)))+(((px)*(x461)))+(((IkReal(-1.00000000000000))*(px)*(x463)))+(((py)*(x460))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x462)))+(((IkReal(-1.00000000000000))*(py)*(x461)))+(((cj3)*(x462)))+(((px)*(x460)))+(((py)*(x463))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst26)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(x464)))+(((cj3)*(x464)))+(((px)*(x461)))+(((IkReal(-1.00000000000000))*(px)*(x463)))+(((py)*(x460)))))), ((gconst26)*(((((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x462)))+(((IkReal(-1.00000000000000))*(py)*(x461)))+(((cj3)*(x462)))+(((px)*(x460)))+(((py)*(x463)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x465=IKsin(j0);
IkReal x466=IKcos(j0);
IkReal x467=((IkReal(1.00000000000000))*(py));
IkReal x468=((px)*(x465));
IkReal x469=((px)*(x466));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x465)*(x467)))+(((IkReal(-1.00000000000000))*(x469)))+(((IkReal(0.0300000000000000))*(cj3)))+(((IkReal(0.313800000000000))*(sj3))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x466)*(x467)))+(((IkReal(0.313800000000000))*(cj3)))+(x468));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x468)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x469)))+(((IkReal(-0.0600000000000000))*(py)*(x465)))+(((IkReal(0.600000000000000))*(py)*(x466))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x470=((IkReal(0.0300000000000000))*(sj3));
IkReal x471=((cj2)*(px));
IkReal x472=((IkReal(0.313800000000000))*(sj3));
IkReal x473=((IkReal(0.313800000000000))*(cj3));
IkReal x474=((cj2)*(py));
IkReal x475=((IkReal(0.0300000000000000))*(cj2)*(cj3));
if( IKabs(((gconst23)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(0.0300000000000000))*(x474)))+(((IkReal(-0.0300000000000000))*(cj3)*(x474)))+(((IkReal(-1.00000000000000))*(x472)*(x474)))+(((IkReal(-1.00000000000000))*(px)*(x473)))+(((px)*(x470))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(0.300000000000000))*(py)))+(((IkReal(0.0300000000000000))*(x471)))+(((IkReal(-0.0300000000000000))*(cj3)*(x471)))+(((IkReal(-1.00000000000000))*(py)*(x470)))+(((IkReal(-1.00000000000000))*(x471)*(x472)))+(((py)*(x473))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst23)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(0.0300000000000000))*(x474)))+(((IkReal(-0.0300000000000000))*(cj3)*(x474)))+(((IkReal(-1.00000000000000))*(x472)*(x474)))+(((IkReal(-1.00000000000000))*(px)*(x473)))+(((px)*(x470)))))), ((gconst23)*(((((IkReal(0.300000000000000))*(py)))+(((IkReal(0.0300000000000000))*(x471)))+(((IkReal(-0.0300000000000000))*(cj3)*(x471)))+(((IkReal(-1.00000000000000))*(py)*(x470)))+(((IkReal(-1.00000000000000))*(x471)*(x472)))+(((py)*(x473)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x476=IKsin(j0);
IkReal x477=IKcos(j0);
IkReal x478=((IkReal(0.0600000000000000))*(cj2));
IkReal x479=((IkReal(0.313800000000000))*(sj3));
IkReal x480=((IkReal(1.00000000000000))*(cj2));
IkReal x481=((IkReal(0.0300000000000000))*(cj2));
IkReal x482=((pz)*(sj2));
IkReal x483=((px)*(x476));
IkReal x484=((px)*(x477));
IkReal x485=((py)*(x476));
IkReal x486=((py)*(x477));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x481)))+(((IkReal(-1.00000000000000))*(x485)))+(((IkReal(-1.00000000000000))*(x484)))+(x481)+(((IkReal(-1.00000000000000))*(cj2)*(x479))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x486)))+(x483));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(x480)))+(((sj2)*(x485)))+(((sj2)*(x484))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x479)))+(((IkReal(-1.00000000000000))*(x482)))+(((IkReal(-1.00000000000000))*(x480)*(x485)))+(((IkReal(-1.00000000000000))*(x480)*(x484)))+(((IkReal(-0.0300000000000000))*(cj3))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x482)))+(((IkReal(-1.00000000000000))*(pp)))+(((x478)*(x485)))+(((x478)*(x484)))+(((IkReal(0.600000000000000))*(x486)))+(((IkReal(-0.600000000000000))*(x483))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x487=((py)*(sj2));
IkReal x488=((IkReal(0.313800000000000))*(cj3));
IkReal x489=((cj2)*(pz));
IkReal x490=((px)*(sj2));
IkReal x491=((IkReal(0.0300000000000000))*(sj3));
if( IKabs(((gconst22)*(((((IkReal(-1.00000000000000))*(x488)*(x490)))+(((py)*(x489)))+(((x490)*(x491)))+(((IkReal(-0.300000000000000))*(x490))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((px)*(x489)))+(((IkReal(0.300000000000000))*(x487)))+(((IkReal(-1.00000000000000))*(x487)*(x491)))+(((x487)*(x488))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst22)*(((((IkReal(-1.00000000000000))*(x488)*(x490)))+(((py)*(x489)))+(((x490)*(x491)))+(((IkReal(-0.300000000000000))*(x490)))))), ((gconst22)*(((((px)*(x489)))+(((IkReal(0.300000000000000))*(x487)))+(((IkReal(-1.00000000000000))*(x487)*(x491)))+(((x487)*(x488)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x492=IKsin(j0);
IkReal x493=IKcos(j0);
IkReal x494=((IkReal(0.0600000000000000))*(cj2));
IkReal x495=((IkReal(0.313800000000000))*(sj3));
IkReal x496=((IkReal(1.00000000000000))*(cj2));
IkReal x497=((IkReal(0.0300000000000000))*(cj2));
IkReal x498=((pz)*(sj2));
IkReal x499=((px)*(x492));
IkReal x500=((px)*(x493));
IkReal x501=((py)*(x492));
IkReal x502=((py)*(x493));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x497)))+(((IkReal(-1.00000000000000))*(cj2)*(x495)))+(x497)+(((IkReal(-1.00000000000000))*(x501)))+(((IkReal(-1.00000000000000))*(x500))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(x499)+(((IkReal(-1.00000000000000))*(x502))));
evalcond[2]=((((sj2)*(x501)))+(((sj2)*(x500)))+(((IkReal(-1.00000000000000))*(pz)*(x496))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x495)))+(((IkReal(-1.00000000000000))*(x496)*(x501)))+(((IkReal(-1.00000000000000))*(x496)*(x500)))+(((IkReal(-1.00000000000000))*(x498)))+(((IkReal(-0.0300000000000000))*(cj3))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x499)))+(((x494)*(x500)))+(((x494)*(x501)))+(((IkReal(0.0600000000000000))*(x498)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x502))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x503=((IkReal(0.0300000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=((((cj3)*(x503)))+(((IkReal(-1.00000000000000))*(x503)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.313800000000000))*(sj2)*(sj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign(((((sj2)*((px)*(px))))+(((sj2)*((py)*(py))))));
dummyeval[0]=((((sj2)*((px)*(px))))+(((sj2)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=pz;
evalcond[3]=((IkReal(-1.00000000000000))*(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(((((IkReal(0.0600000000000000))*((py)*(py))))+(((IkReal(0.0600000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x504=((py)*(sj3));
IkReal x505=((IkReal(0.188280000000000))*(cj3));
IkReal x506=((IkReal(0.0180000000000000))*(px));
IkReal x507=((IkReal(0.0188280000000000))*(cj3));
if( IKabs(((gconst31)*(((((IkReal(-1.00000000000000))*(py)*(x505)))+(((IkReal(0.0180000000000000))*(x504)))+(x506)+(((px)*(x507)))+(((IkReal(-0.00180000000000000))*(px)*(sj3)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((IkReal(0.00180000000000000))*(x504)))+(((IkReal(-1.00000000000000))*(py)*(x507)))+(((sj3)*(x506)))+(((IkReal(-0.0180000000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x505)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst31)*(((((IkReal(-1.00000000000000))*(py)*(x505)))+(((IkReal(0.0180000000000000))*(x504)))+(x506)+(((px)*(x507)))+(((IkReal(-0.00180000000000000))*(px)*(sj3)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py)))))), ((gconst31)*(((((IkReal(0.00180000000000000))*(x504)))+(((IkReal(-1.00000000000000))*(py)*(x507)))+(((sj3)*(x506)))+(((IkReal(-0.0180000000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x505)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x508=IKcos(j0);
IkReal x509=IKsin(j0);
IkReal x510=((px)*(x508));
IkReal x511=((py)*(x508));
IkReal x512=((py)*(x509));
IkReal x513=((px)*(x509));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x510)))+(((IkReal(-1.00000000000000))*(x512)))+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x513)))+(x511));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x513)))+(((IkReal(0.0600000000000000))*(x510)))+(((IkReal(0.0600000000000000))*(x512)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x511))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x514=((IkReal(0.313800000000000))*(sj3));
IkReal x515=((IkReal(0.313800000000000))*(cj3));
IkReal x516=((IkReal(0.0300000000000000))*(px));
IkReal x517=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst30)*(((((px)*(x515)))+(((IkReal(-1.00000000000000))*(cj3)*(x517)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(sj3)*(x516)))+(x517)+(((IkReal(-1.00000000000000))*(py)*(x514))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj3)*(x516)))+(((IkReal(-1.00000000000000))*(px)*(x514)))+(x516)+(((sj3)*(x517)))+(((IkReal(-1.00000000000000))*(py)*(x515))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst30)*(((((px)*(x515)))+(((IkReal(-1.00000000000000))*(cj3)*(x517)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(sj3)*(x516)))+(x517)+(((IkReal(-1.00000000000000))*(py)*(x514)))))), ((gconst30)*(((((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj3)*(x516)))+(((IkReal(-1.00000000000000))*(px)*(x514)))+(x516)+(((sj3)*(x517)))+(((IkReal(-1.00000000000000))*(py)*(x515)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x518=IKcos(j0);
IkReal x519=IKsin(j0);
IkReal x520=((px)*(x518));
IkReal x521=((py)*(x518));
IkReal x522=((py)*(x519));
IkReal x523=((px)*(x519));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x520)))+(((IkReal(-1.00000000000000))*(x522)))+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x523)))+(((IkReal(0.313800000000000))*(cj3)))+(x521));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x520)))+(((IkReal(0.0600000000000000))*(x522)))+(((IkReal(0.600000000000000))*(x523)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x521))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x524=((IkReal(-1.00000000000000))*(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=x524;
evalcond[3]=x524;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst33;
gconst33=IKsign(((((IkReal(-0.0600000000000000))*((px)*(px))))+(((IkReal(-0.0600000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x525=((IkReal(0.188280000000000))*(cj3));
IkReal x526=((py)*(sj3));
IkReal x527=((IkReal(0.0180000000000000))*(px));
IkReal x528=((IkReal(0.0188280000000000))*(cj3));
if( IKabs(((gconst33)*(((((IkReal(-1.00000000000000))*(px)*(x528)))+(((IkReal(-1.00000000000000))*(x527)))+(((IkReal(0.00180000000000000))*(px)*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x525)))+(((IkReal(0.0180000000000000))*(x526)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((IkReal(0.0180000000000000))*(py)))+(((sj3)*(x527)))+(((IkReal(-1.00000000000000))*(px)*(x525)))+(((IkReal(-0.00180000000000000))*(x526)))+(((py)*(x528)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst33)*(((((IkReal(-1.00000000000000))*(px)*(x528)))+(((IkReal(-1.00000000000000))*(x527)))+(((IkReal(0.00180000000000000))*(px)*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x525)))+(((IkReal(0.0180000000000000))*(x526)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py)))))), ((gconst33)*(((((IkReal(0.0180000000000000))*(py)))+(((sj3)*(x527)))+(((IkReal(-1.00000000000000))*(px)*(x525)))+(((IkReal(-0.00180000000000000))*(x526)))+(((py)*(x528)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x529=IKcos(j0);
IkReal x530=IKsin(j0);
IkReal x531=((px)*(x529));
IkReal x532=((py)*(x529));
IkReal x533=((py)*(x530));
IkReal x534=((px)*(x530));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x533)))+(((IkReal(-1.00000000000000))*(x531)))+(((IkReal(0.0300000000000000))*(cj3)))+(((IkReal(0.313800000000000))*(sj3))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x534)))+(((IkReal(0.313800000000000))*(cj3)))+(x532));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x534)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x533)))+(((IkReal(-0.0600000000000000))*(x531)))+(((IkReal(-0.600000000000000))*(x532))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x535=((IkReal(0.313800000000000))*(sj3));
IkReal x536=((IkReal(0.0300000000000000))*(sj3));
IkReal x537=((IkReal(0.0300000000000000))*(px));
IkReal x538=((IkReal(0.313800000000000))*(cj3));
IkReal x539=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst32)*(((((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(x539)))+(((IkReal(-1.00000000000000))*(px)*(x536)))+(((px)*(x538)))+(((cj3)*(x539)))+(((py)*(x535))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst32)*(((((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x537)))+(((px)*(x535)))+(((IkReal(-1.00000000000000))*(py)*(x538)))+(((cj3)*(x537)))+(((py)*(x536))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst32)*(((((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(x539)))+(((IkReal(-1.00000000000000))*(px)*(x536)))+(((px)*(x538)))+(((cj3)*(x539)))+(((py)*(x535)))))), ((gconst32)*(((((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x537)))+(((px)*(x535)))+(((IkReal(-1.00000000000000))*(py)*(x538)))+(((cj3)*(x537)))+(((py)*(x536)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x540=IKcos(j0);
IkReal x541=IKsin(j0);
IkReal x542=((px)*(x540));
IkReal x543=((py)*(x540));
IkReal x544=((py)*(x541));
IkReal x545=((px)*(x541));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x542)))+(((IkReal(-1.00000000000000))*(x544)))+(((IkReal(0.0300000000000000))*(cj3)))+(((IkReal(0.313800000000000))*(sj3))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x545)))+(((IkReal(0.313800000000000))*(cj3)))+(x543));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x545)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x544)))+(((IkReal(-0.0600000000000000))*(x542)))+(((IkReal(-0.600000000000000))*(x543))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x546=((cj3)*(py));
IkReal x547=((IkReal(0.0300000000000000))*(cj2));
IkReal x548=((cj3)*(px));
IkReal x549=((IkReal(0.0300000000000000))*(sj3));
IkReal x550=((IkReal(0.313800000000000))*(cj2)*(sj3));
if( IKabs(((gconst29)*(((((py)*(x547)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x549)))+(((IkReal(0.313800000000000))*(x548)))+(((IkReal(-1.00000000000000))*(py)*(x550)))+(((IkReal(-1.00000000000000))*(x546)*(x547))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((py)*(x549)))+(((IkReal(-0.313800000000000))*(x546)))+(((IkReal(-0.300000000000000))*(py)))+(((px)*(x547)))+(((IkReal(-1.00000000000000))*(px)*(x550)))+(((IkReal(-1.00000000000000))*(x547)*(x548))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst29)*(((((py)*(x547)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x549)))+(((IkReal(0.313800000000000))*(x548)))+(((IkReal(-1.00000000000000))*(py)*(x550)))+(((IkReal(-1.00000000000000))*(x546)*(x547)))))), ((gconst29)*(((((py)*(x549)))+(((IkReal(-0.313800000000000))*(x546)))+(((IkReal(-0.300000000000000))*(py)))+(((px)*(x547)))+(((IkReal(-1.00000000000000))*(px)*(x550)))+(((IkReal(-1.00000000000000))*(x547)*(x548)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x551=IKcos(j0);
IkReal x552=IKsin(j0);
IkReal x553=((IkReal(0.0600000000000000))*(cj2));
IkReal x554=((IkReal(0.313800000000000))*(sj3));
IkReal x555=((IkReal(0.0300000000000000))*(cj2));
IkReal x556=((pz)*(sj2));
IkReal x557=((IkReal(1.00000000000000))*(cj2));
IkReal x558=((px)*(x551));
IkReal x559=((py)*(x552));
IkReal x560=((py)*(x551));
IkReal x561=((px)*(x552));
evalcond[0]=((((IkReal(-1.00000000000000))*(x558)))+(((IkReal(-1.00000000000000))*(x559)))+(((IkReal(-1.00000000000000))*(cj2)*(x554)))+(((IkReal(-1.00000000000000))*(cj3)*(x555)))+(x555));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(x560)+(((IkReal(-1.00000000000000))*(x561))));
evalcond[2]=((((sj2)*(x558)))+(((sj2)*(x559)))+(((cj2)*(pz))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x554)))+(x556)+(((IkReal(-1.00000000000000))*(x557)*(x558)))+(((IkReal(-1.00000000000000))*(x557)*(x559)))+(((IkReal(-0.0300000000000000))*(cj3))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x561)))+(((IkReal(-0.600000000000000))*(x560)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x556)))+(((x553)*(x559)))+(((x553)*(x558))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x562=((py)*(sj2));
IkReal x563=((IkReal(0.313800000000000))*(cj3));
IkReal x564=((IkReal(0.0300000000000000))*(sj3));
IkReal x565=((px)*(sj2));
IkReal x566=((IkReal(1.00000000000000))*(cj2)*(pz));
if( IKabs(((gconst28)*(((((IkReal(-1.00000000000000))*(x564)*(x565)))+(((IkReal(-1.00000000000000))*(py)*(x566)))+(((x563)*(x565)))+(((IkReal(0.300000000000000))*(x565))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((x562)*(x564)))+(((IkReal(-1.00000000000000))*(x562)*(x563)))+(((IkReal(-0.300000000000000))*(x562)))+(((IkReal(-1.00000000000000))*(px)*(x566))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst28)*(((((IkReal(-1.00000000000000))*(x564)*(x565)))+(((IkReal(-1.00000000000000))*(py)*(x566)))+(((x563)*(x565)))+(((IkReal(0.300000000000000))*(x565)))))), ((gconst28)*(((((x562)*(x564)))+(((IkReal(-1.00000000000000))*(x562)*(x563)))+(((IkReal(-0.300000000000000))*(x562)))+(((IkReal(-1.00000000000000))*(px)*(x566)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x567=IKcos(j0);
IkReal x568=IKsin(j0);
IkReal x569=((IkReal(0.0600000000000000))*(cj2));
IkReal x570=((IkReal(0.313800000000000))*(sj3));
IkReal x571=((IkReal(0.0300000000000000))*(cj2));
IkReal x572=((pz)*(sj2));
IkReal x573=((IkReal(1.00000000000000))*(cj2));
IkReal x574=((px)*(x567));
IkReal x575=((py)*(x568));
IkReal x576=((py)*(x567));
IkReal x577=((px)*(x568));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj2)*(x570)))+(((IkReal(-1.00000000000000))*(cj3)*(x571)))+(((IkReal(-1.00000000000000))*(x575)))+(((IkReal(-1.00000000000000))*(x574)))+(x571));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x577)))+(x576));
evalcond[2]=((((sj2)*(x574)))+(((sj2)*(x575)))+(((cj2)*(pz))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x573)*(x574)))+(((IkReal(-1.00000000000000))*(x573)*(x575)))+(((IkReal(-1.00000000000000))*(x570)))+(x572)+(((IkReal(-0.0300000000000000))*(cj3))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x576)))+(((IkReal(0.600000000000000))*(x577)))+(((IkReal(-0.0600000000000000))*(x572)))+(((IkReal(-1.00000000000000))*(pp)))+(((x569)*(x574)))+(((x569)*(x575))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x578=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj3)))+(((IkReal(0.313800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=x578;
evalcond[3]=x578;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst34;
gconst34=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
IkReal x579=((IkReal(1.00000000000000))*(sj2));
gconst35=IKsign(((((IkReal(-1.00000000000000))*(x579)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x579)*((px)*(px))))));
IkReal x580=((IkReal(1.00000000000000))*(sj2));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x580)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x580)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x581=x578;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=x581;
evalcond[3]=x581;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
gconst36=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x582=((IkReal(50.0000000000000))*(pp));
IkReal x583=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst37)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x582)))+(((py)*(x583))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((IkReal(0.423522000000000))*(px)))+(((px)*(x583)))+(((IkReal(-1.00000000000000))*(px)*(x582))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst37)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x582)))+(((py)*(x583)))))), ((gconst37)*(((((IkReal(0.423522000000000))*(px)))+(((px)*(x583)))+(((IkReal(-1.00000000000000))*(px)*(x582)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x584=IKcos(j0);
IkReal x585=IKsin(j0);
IkReal x586=((px)*(x584));
IkReal x587=((IkReal(1.00000000000000))*(x585));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x586)))+(((IkReal(-1.00000000000000))*(py)*(x587)))+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x587)))+(((py)*(x584))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(py)*(x585)))+(((IkReal(0.0600000000000000))*(x586)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x588=((IkReal(0.313800000000000))*(sj3));
IkReal x589=((IkReal(0.0300000000000000))*(px));
IkReal x590=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst36)*(((((IkReal(-1.00000000000000))*(py)*(x588)))+(((IkReal(-1.00000000000000))*(cj3)*(x590)))+(x590))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((((IkReal(-1.00000000000000))*(px)*(x588)))+(x589)+(((IkReal(-1.00000000000000))*(cj3)*(x589))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst36)*(((((IkReal(-1.00000000000000))*(py)*(x588)))+(((IkReal(-1.00000000000000))*(cj3)*(x590)))+(x590)))), ((gconst36)*(((((IkReal(-1.00000000000000))*(px)*(x588)))+(x589)+(((IkReal(-1.00000000000000))*(cj3)*(x589)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x591=IKcos(j0);
IkReal x592=IKsin(j0);
IkReal x593=((px)*(x591));
IkReal x594=((IkReal(1.00000000000000))*(x592));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x593)))+(((IkReal(-1.00000000000000))*(py)*(x594)))+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x594)))+(((py)*(x591))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(py)*(x592)))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x593))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x595=x578;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=x595;
evalcond[3]=x595;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
gconst38=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x596=((IkReal(50.0000000000000))*(pp));
IkReal x597=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst39)*(((((IkReal(0.423522000000000))*(py)))+(((py)*(x597)))+(((IkReal(-1.00000000000000))*(py)*(x596))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x596)))+(((px)*(x597))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst39)*(((((IkReal(0.423522000000000))*(py)))+(((py)*(x597)))+(((IkReal(-1.00000000000000))*(py)*(x596)))))), ((gconst39)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x596)))+(((px)*(x597)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x598=IKsin(j0);
IkReal x599=IKcos(j0);
IkReal x600=((IkReal(1.00000000000000))*(py));
IkReal x601=((px)*(x599));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.0300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x601)))+(((IkReal(-1.00000000000000))*(x598)*(x600)))+(((IkReal(0.313800000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x599)*(x600)))+(((px)*(x598))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x601)))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(py)*(x598)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x602=((IkReal(0.313800000000000))*(sj3));
IkReal x603=((IkReal(0.0300000000000000))*(px));
IkReal x604=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst38)*(((((cj3)*(x604)))+(((py)*(x602)))+(((IkReal(-1.00000000000000))*(x604))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((px)*(x602)))+(((cj3)*(x603)))+(((IkReal(-1.00000000000000))*(x603))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst38)*(((((cj3)*(x604)))+(((py)*(x602)))+(((IkReal(-1.00000000000000))*(x604)))))), ((gconst38)*(((((px)*(x602)))+(((cj3)*(x603)))+(((IkReal(-1.00000000000000))*(x603)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x605=IKsin(j0);
IkReal x606=IKcos(j0);
IkReal x607=((IkReal(1.00000000000000))*(py));
IkReal x608=((px)*(x606));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x605)*(x607)))+(((IkReal(0.0300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x608)))+(((IkReal(0.313800000000000))*(sj3))));
evalcond[1]=((((px)*(x605)))+(((IkReal(-1.00000000000000))*(x606)*(x607))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x608)))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(py)*(x605)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x609=(sj2)*(sj2);
IkReal x610=((cj2)*(sj2));
IkReal x611=((IkReal(0.0300000000000000))*(py));
IkReal x612=((IkReal(0.313800000000000))*(sj3));
IkReal x613=((IkReal(0.0300000000000000))*(px));
IkReal x614=((cj3)*(x613));
if( IKabs(((gconst35)*(((((cj3)*(x610)*(x611)))+(((py)*(x610)*(x612)))+(((IkReal(-1.00000000000000))*(x610)*(x611)))+(((IkReal(-1.00000000000000))*(x609)*(x613)))+(((px)*(x609)*(x612)))+(((x609)*(x614))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((IkReal(-1.00000000000000))*(x610)*(x613)))+(((IkReal(-1.00000000000000))*(py)*(x609)*(x612)))+(((IkReal(-1.00000000000000))*(cj3)*(x609)*(x611)))+(((x609)*(x611)))+(((px)*(x610)*(x612)))+(((x610)*(x614))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst35)*(((((cj3)*(x610)*(x611)))+(((py)*(x610)*(x612)))+(((IkReal(-1.00000000000000))*(x610)*(x611)))+(((IkReal(-1.00000000000000))*(x609)*(x613)))+(((px)*(x609)*(x612)))+(((x609)*(x614)))))), ((gconst35)*(((((IkReal(-1.00000000000000))*(x610)*(x613)))+(((IkReal(-1.00000000000000))*(py)*(x609)*(x612)))+(((IkReal(-1.00000000000000))*(cj3)*(x609)*(x611)))+(((x609)*(x611)))+(((px)*(x610)*(x612)))+(((x610)*(x614)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x615=IKcos(j0);
IkReal x616=IKsin(j0);
IkReal x617=((IkReal(0.0600000000000000))*(cj2));
IkReal x618=((IkReal(0.313800000000000))*(sj3));
IkReal x619=((IkReal(0.0600000000000000))*(sj2));
IkReal x620=((IkReal(0.0300000000000000))*(cj2));
IkReal x621=((IkReal(1.00000000000000))*(cj2));
IkReal x622=((IkReal(0.0300000000000000))*(cj3));
IkReal x623=((px)*(x616));
IkReal x624=((px)*(x615));
IkReal x625=((py)*(x616));
IkReal x626=((py)*(x615));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj2)*(x618)))+(x620)+(((IkReal(-1.00000000000000))*(x624)))+(((IkReal(-1.00000000000000))*(x625)))+(((IkReal(-1.00000000000000))*(cj3)*(x620))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x621)*(x623)))+(((sj2)*(x624)))+(((sj2)*(x625)))+(((cj2)*(x626))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x621)*(x624)))+(((IkReal(-1.00000000000000))*(x621)*(x625)))+(((IkReal(-1.00000000000000))*(x622)))+(((sj2)*(x626)))+(((IkReal(-1.00000000000000))*(sj2)*(x623)))+(((IkReal(-1.00000000000000))*(x618))));
evalcond[3]=((((IkReal(-0.0300000000000000))*(sj2)))+(((sj2)*(x622)))+(x623)+(((IkReal(-1.00000000000000))*(x626)))+(((sj2)*(x618))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((x617)*(x624)))+(((x617)*(x625)))+(((x619)*(x623)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x619)*(x626))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x627=((IkReal(0.0300000000000000))*(cj3));
IkReal x628=((cj2)*(py));
IkReal x629=((px)*(sj2));
IkReal x630=((cj2)*(px));
IkReal x631=((IkReal(0.313800000000000))*(sj3));
IkReal x632=((py)*(sj2));
if( IKabs(((gconst34)*(((((IkReal(-1.00000000000000))*(x629)*(x631)))+(((IkReal(-1.00000000000000))*(x628)*(x631)))+(((IkReal(0.0300000000000000))*(x628)))+(((IkReal(0.0300000000000000))*(x629)))+(((IkReal(-1.00000000000000))*(x627)*(x629)))+(((IkReal(-1.00000000000000))*(x627)*(x628))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((IkReal(-1.00000000000000))*(x630)*(x631)))+(((IkReal(0.0300000000000000))*(x630)))+(((IkReal(-1.00000000000000))*(x627)*(x630)))+(((x627)*(x632)))+(((x631)*(x632)))+(((IkReal(-0.0300000000000000))*(x632))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst34)*(((((IkReal(-1.00000000000000))*(x629)*(x631)))+(((IkReal(-1.00000000000000))*(x628)*(x631)))+(((IkReal(0.0300000000000000))*(x628)))+(((IkReal(0.0300000000000000))*(x629)))+(((IkReal(-1.00000000000000))*(x627)*(x629)))+(((IkReal(-1.00000000000000))*(x627)*(x628)))))), ((gconst34)*(((((IkReal(-1.00000000000000))*(x630)*(x631)))+(((IkReal(0.0300000000000000))*(x630)))+(((IkReal(-1.00000000000000))*(x627)*(x630)))+(((x627)*(x632)))+(((x631)*(x632)))+(((IkReal(-0.0300000000000000))*(x632)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x633=IKcos(j0);
IkReal x634=IKsin(j0);
IkReal x635=((IkReal(0.0600000000000000))*(cj2));
IkReal x636=((IkReal(0.313800000000000))*(sj3));
IkReal x637=((IkReal(0.0600000000000000))*(sj2));
IkReal x638=((IkReal(0.0300000000000000))*(cj2));
IkReal x639=((IkReal(1.00000000000000))*(cj2));
IkReal x640=((IkReal(0.0300000000000000))*(cj3));
IkReal x641=((px)*(x634));
IkReal x642=((px)*(x633));
IkReal x643=((py)*(x634));
IkReal x644=((py)*(x633));
evalcond[0]=((((IkReal(-1.00000000000000))*(x642)))+(((IkReal(-1.00000000000000))*(x643)))+(x638)+(((IkReal(-1.00000000000000))*(cj2)*(x636)))+(((IkReal(-1.00000000000000))*(cj3)*(x638))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x639)*(x641)))+(((sj2)*(x643)))+(((sj2)*(x642)))+(((cj2)*(x644))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x639)*(x643)))+(((IkReal(-1.00000000000000))*(x639)*(x642)))+(((IkReal(-1.00000000000000))*(x636)))+(((IkReal(-1.00000000000000))*(x640)))+(((IkReal(-1.00000000000000))*(sj2)*(x641)))+(((sj2)*(x644))));
evalcond[3]=((((IkReal(-0.0300000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x644)))+(((sj2)*(x636)))+(((sj2)*(x640)))+(x641));
evalcond[4]=((IkReal(0.00847044000000000))+(((x635)*(x642)))+(((x635)*(x643)))+(((IkReal(0.600000000000000))*(pz)))+(((x637)*(x641)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x637)*(x644))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x645=((IkReal(0.0300000000000000))*(sj3));
IkReal x646=((IkReal(0.313800000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x645)))+(pz)+(x646));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x646)))+(x645));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
IkReal x647=((IkReal(1.00000000000000))*(sj2));
gconst41=IKsign(((((IkReal(-1.00000000000000))*(x647)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x647)*((py)*(py))))));
IkReal x648=((IkReal(1.00000000000000))*(sj2));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x648)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x648)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x649=((IkReal(0.0300000000000000))*(sj3));
IkReal x650=((IkReal(0.313800000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x649)))+(pz)+(x650));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(x650)))+(((IkReal(-1.00000000000000))*(pz)))+(x649));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x651=((IkReal(50.0000000000000))*(pp));
IkReal x652=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst43)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x651)))+(((IkReal(-1.00000000000000))*(py)*(x652))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst43)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x652)))+(((IkReal(-1.00000000000000))*(px)*(x651))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst43)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x651)))+(((IkReal(-1.00000000000000))*(py)*(x652)))))), ((gconst43)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x652)))+(((IkReal(-1.00000000000000))*(px)*(x651)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x653=IKsin(j0);
IkReal x654=IKcos(j0);
IkReal x655=((IkReal(1.00000000000000))*(py));
IkReal x656=((px)*(x654));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x656)))+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x653)*(x655)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[1]=((((px)*(x653)))+(((IkReal(-1.00000000000000))*(x654)*(x655))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(py)*(x653)))+(((IkReal(0.0600000000000000))*(x656)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x657=((IkReal(0.313800000000000))*(sj3));
IkReal x658=((IkReal(0.0300000000000000))*(px));
IkReal x659=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst42)*(((((IkReal(-1.00000000000000))*(cj3)*(x659)))+(x659)+(((IkReal(-1.00000000000000))*(py)*(x657))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst42)*(((((IkReal(-1.00000000000000))*(px)*(x657)))+(((IkReal(-1.00000000000000))*(cj3)*(x658)))+(x658))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst42)*(((((IkReal(-1.00000000000000))*(cj3)*(x659)))+(x659)+(((IkReal(-1.00000000000000))*(py)*(x657)))))), ((gconst42)*(((((IkReal(-1.00000000000000))*(px)*(x657)))+(((IkReal(-1.00000000000000))*(cj3)*(x658)))+(x658)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x660=IKsin(j0);
IkReal x661=IKcos(j0);
IkReal x662=((IkReal(1.00000000000000))*(py));
IkReal x663=((px)*(x661));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x660)*(x662)))+(((IkReal(-1.00000000000000))*(x663)))+(((IkReal(-0.0300000000000000))*(cj3)))+(((IkReal(-0.313800000000000))*(sj3))));
evalcond[1]=((((px)*(x660)))+(((IkReal(-1.00000000000000))*(x661)*(x662))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(py)*(x660)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x663))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x664=((IkReal(0.0300000000000000))*(sj3));
IkReal x665=((IkReal(0.313800000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x664)))+(pz)+(x665));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x665)))+(x664));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x666=((IkReal(50.0000000000000))*(pp));
IkReal x667=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst45)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x666)))+(((IkReal(-1.00000000000000))*(py)*(x667))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst45)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x667)))+(((IkReal(-1.00000000000000))*(px)*(x666))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst45)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x666)))+(((IkReal(-1.00000000000000))*(py)*(x667)))))), ((gconst45)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x667)))+(((IkReal(-1.00000000000000))*(px)*(x666)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x668=IKcos(j0);
IkReal x669=IKsin(j0);
IkReal x670=((px)*(x668));
IkReal x671=((IkReal(1.00000000000000))*(x669));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.0300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x671)))+(((IkReal(0.313800000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x670))));
evalcond[1]=((((py)*(x668)))+(((IkReal(-1.00000000000000))*(px)*(x671))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(py)*(x669)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x670))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x672=((IkReal(0.313800000000000))*(sj3));
IkReal x673=((IkReal(0.0300000000000000))*(px));
IkReal x674=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst44)*(((((py)*(x672)))+(((cj3)*(x674)))+(((IkReal(-1.00000000000000))*(x674))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst44)*(((((cj3)*(x673)))+(((IkReal(-1.00000000000000))*(x673)))+(((px)*(x672))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst44)*(((((py)*(x672)))+(((cj3)*(x674)))+(((IkReal(-1.00000000000000))*(x674)))))), ((gconst44)*(((((cj3)*(x673)))+(((IkReal(-1.00000000000000))*(x673)))+(((px)*(x672)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x675=IKcos(j0);
IkReal x676=IKsin(j0);
IkReal x677=((px)*(x675));
IkReal x678=((IkReal(1.00000000000000))*(x676));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.0300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x678)))+(((IkReal(0.313800000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x677))));
evalcond[1]=((((py)*(x675)))+(((IkReal(-1.00000000000000))*(px)*(x678))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x677)))+(((IkReal(-0.0600000000000000))*(py)*(x676))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x679=(sj2)*(sj2);
IkReal x680=((cj2)*(sj2));
IkReal x681=((IkReal(0.313800000000000))*(sj3));
IkReal x682=((IkReal(0.0300000000000000))*(px));
IkReal x683=((IkReal(0.0300000000000000))*(cj3)*(py));
IkReal x684=((py)*(x679));
IkReal x685=((cj3)*(x682));
if( IKabs(((gconst41)*(((((py)*(x680)*(x681)))+(((IkReal(-1.00000000000000))*(x679)*(x685)))+(((x679)*(x682)))+(((IkReal(-1.00000000000000))*(px)*(x679)*(x681)))+(((IkReal(-0.0300000000000000))*(py)*(x680)))+(((x680)*(x683))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((((IkReal(-1.00000000000000))*(x680)*(x682)))+(((px)*(x680)*(x681)))+(((x679)*(x683)))+(((x681)*(x684)))+(((x680)*(x685)))+(((IkReal(-0.0300000000000000))*(x684))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst41)*(((((py)*(x680)*(x681)))+(((IkReal(-1.00000000000000))*(x679)*(x685)))+(((x679)*(x682)))+(((IkReal(-1.00000000000000))*(px)*(x679)*(x681)))+(((IkReal(-0.0300000000000000))*(py)*(x680)))+(((x680)*(x683)))))), ((gconst41)*(((((IkReal(-1.00000000000000))*(x680)*(x682)))+(((px)*(x680)*(x681)))+(((x679)*(x683)))+(((x681)*(x684)))+(((x680)*(x685)))+(((IkReal(-0.0300000000000000))*(x684)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x686=IKcos(j0);
IkReal x687=IKsin(j0);
IkReal x688=((IkReal(0.0600000000000000))*(cj2));
IkReal x689=((IkReal(0.313800000000000))*(sj3));
IkReal x690=((IkReal(0.0600000000000000))*(sj2));
IkReal x691=((IkReal(0.0300000000000000))*(cj2));
IkReal x692=((IkReal(1.00000000000000))*(cj2));
IkReal x693=((IkReal(0.0300000000000000))*(cj3));
IkReal x694=((px)*(x687));
IkReal x695=((px)*(x686));
IkReal x696=((py)*(x687));
IkReal x697=((py)*(x686));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x691)))+(x691)+(((IkReal(-1.00000000000000))*(cj2)*(x689)))+(((IkReal(-1.00000000000000))*(x695)))+(((IkReal(-1.00000000000000))*(x696))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x692)*(x697)))+(((sj2)*(x695)))+(((sj2)*(x696)))+(((cj2)*(x694))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x689)))+(((IkReal(-1.00000000000000))*(sj2)*(x697)))+(((IkReal(-1.00000000000000))*(x692)*(x696)))+(((IkReal(-1.00000000000000))*(x692)*(x695)))+(((IkReal(-1.00000000000000))*(x693)))+(((sj2)*(x694))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj2)*(x693)))+(((IkReal(0.0300000000000000))*(sj2)))+(x694)+(((IkReal(-1.00000000000000))*(sj2)*(x689)))+(((IkReal(-1.00000000000000))*(x697))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x688)*(x695)))+(((x688)*(x696)))+(((x690)*(x697)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x690)*(x694))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x698=((cj2)*(px));
IkReal x699=((IkReal(0.313800000000000))*(sj3));
IkReal x700=((cj2)*(py));
IkReal x701=((IkReal(0.0300000000000000))*(cj2)*(cj3));
IkReal x702=((IkReal(0.0300000000000000))*(px)*(sj2));
IkReal x703=((IkReal(0.0300000000000000))*(py)*(sj2));
if( IKabs(((gconst40)*(((((px)*(sj2)*(x699)))+(((IkReal(-1.00000000000000))*(x702)))+(((IkReal(-1.00000000000000))*(x699)*(x700)))+(((IkReal(0.0300000000000000))*(x700)))+(((IkReal(-0.0300000000000000))*(cj3)*(x700)))+(((cj3)*(x702))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((IkReal(0.0300000000000000))*(x698)))+(((IkReal(-1.00000000000000))*(cj3)*(x703)))+(((IkReal(-1.00000000000000))*(x698)*(x699)))+(x703)+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x699)))+(((IkReal(-0.0300000000000000))*(cj3)*(x698))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst40)*(((((px)*(sj2)*(x699)))+(((IkReal(-1.00000000000000))*(x702)))+(((IkReal(-1.00000000000000))*(x699)*(x700)))+(((IkReal(0.0300000000000000))*(x700)))+(((IkReal(-0.0300000000000000))*(cj3)*(x700)))+(((cj3)*(x702)))))), ((gconst40)*(((((IkReal(0.0300000000000000))*(x698)))+(((IkReal(-1.00000000000000))*(cj3)*(x703)))+(((IkReal(-1.00000000000000))*(x698)*(x699)))+(x703)+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x699)))+(((IkReal(-0.0300000000000000))*(cj3)*(x698)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x704=IKcos(j0);
IkReal x705=IKsin(j0);
IkReal x706=((IkReal(0.0600000000000000))*(cj2));
IkReal x707=((IkReal(0.313800000000000))*(sj3));
IkReal x708=((IkReal(0.0600000000000000))*(sj2));
IkReal x709=((IkReal(0.0300000000000000))*(cj2));
IkReal x710=((IkReal(1.00000000000000))*(cj2));
IkReal x711=((IkReal(0.0300000000000000))*(cj3));
IkReal x712=((px)*(x705));
IkReal x713=((px)*(x704));
IkReal x714=((py)*(x705));
IkReal x715=((py)*(x704));
evalcond[0]=((((IkReal(-1.00000000000000))*(x713)))+(((IkReal(-1.00000000000000))*(x714)))+(((IkReal(-1.00000000000000))*(cj2)*(x707)))+(((IkReal(-1.00000000000000))*(cj3)*(x709)))+(x709));
evalcond[1]=((((IkReal(-1.00000000000000))*(x710)*(x715)))+(((sj2)*(x713)))+(((sj2)*(x714)))+(((cj2)*(x712))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x710)*(x714)))+(((IkReal(-1.00000000000000))*(x710)*(x713)))+(((IkReal(-1.00000000000000))*(sj2)*(x715)))+(((sj2)*(x712)))+(((IkReal(-1.00000000000000))*(x711)))+(((IkReal(-1.00000000000000))*(x707))));
evalcond[3]=((((IkReal(0.0300000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x715)))+(x712)+(((IkReal(-1.00000000000000))*(sj2)*(x707)))+(((IkReal(-1.00000000000000))*(sj2)*(x711))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x706)*(x713)))+(((x706)*(x714)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x708)*(x712)))+(((x708)*(x715))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x716=(cj2)*(cj2);
IkReal x717=((cj2)*(py));
IkReal x718=((cj1)*(pz));
IkReal x719=((cj2)*(px));
IkReal x720=((IkReal(0.0300000000000000))*(sj2));
IkReal x721=((IkReal(0.313800000000000))*(sj3));
IkReal x722=((cj3)*(x720));
IkReal x723=((py)*(sj1)*(x716));
IkReal x724=((IkReal(0.0300000000000000))*(px)*(sj1)*(x716));
if( IKabs(((gconst1)*(((((IkReal(-0.0300000000000000))*(cj3)*(x723)))+(((IkReal(-1.00000000000000))*(x718)*(x719)))+(((IkReal(-1.00000000000000))*(x721)*(x723)))+(((IkReal(0.0300000000000000))*(x723)))+(((x719)*(x720)))+(((IkReal(-1.00000000000000))*(sj2)*(x719)*(x721)))+(((IkReal(-1.00000000000000))*(x719)*(x722))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(px)*(sj1)*(x716)*(x721)))+(((sj2)*(x717)*(x721)))+(((IkReal(-1.00000000000000))*(cj3)*(x724)))+(((IkReal(-1.00000000000000))*(x717)*(x720)))+(((x717)*(x722)))+(((x717)*(x718)))+(x724))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst1)*(((((IkReal(-0.0300000000000000))*(cj3)*(x723)))+(((IkReal(-1.00000000000000))*(x718)*(x719)))+(((IkReal(-1.00000000000000))*(x721)*(x723)))+(((IkReal(0.0300000000000000))*(x723)))+(((x719)*(x720)))+(((IkReal(-1.00000000000000))*(sj2)*(x719)*(x721)))+(((IkReal(-1.00000000000000))*(x719)*(x722)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(px)*(sj1)*(x716)*(x721)))+(((sj2)*(x717)*(x721)))+(((IkReal(-1.00000000000000))*(cj3)*(x724)))+(((IkReal(-1.00000000000000))*(x717)*(x720)))+(((x717)*(x722)))+(((x717)*(x718)))+(x724)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x725=IKsin(j0);
IkReal x726=IKcos(j0);
IkReal x727=((IkReal(0.0600000000000000))*(cj2));
IkReal x728=((IkReal(1.00000000000000))*(sj2));
IkReal x729=((cj1)*(pz));
IkReal x730=((IkReal(0.313800000000000))*(sj3));
IkReal x731=((IkReal(0.0300000000000000))*(cj2));
IkReal x732=((IkReal(0.0300000000000000))*(sj3));
IkReal x733=((sj1)*(sj2));
IkReal x734=((IkReal(0.313800000000000))*(cj3));
IkReal x735=((IkReal(1.00000000000000))*(cj2));
IkReal x736=((pz)*(sj1));
IkReal x737=((IkReal(0.0300000000000000))*(cj3));
IkReal x738=((IkReal(0.600000000000000))*(cj1));
IkReal x739=((px)*(x725));
IkReal x740=((px)*(x726));
IkReal x741=((py)*(x725));
IkReal x742=((py)*(x726));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x731)))+(((IkReal(-1.00000000000000))*(cj2)*(x730)))+(((IkReal(-1.00000000000000))*(x740)))+(((IkReal(-1.00000000000000))*(x741)))+(x731));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x736)))+(((IkReal(-1.00000000000000))*(cj1)*(x742)))+(((IkReal(-1.00000000000000))*(x732)))+(x734)+(((cj1)*(x739))));
evalcond[2]=((((cj2)*(sj1)*(x742)))+(((IkReal(-1.00000000000000))*(sj1)*(x735)*(x739)))+(((sj2)*(x740)))+(((sj2)*(x741)))+(((IkReal(-1.00000000000000))*(x729)*(x735))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x728)*(x739)))+(((IkReal(-1.00000000000000))*(x737)))+(((IkReal(-1.00000000000000))*(x730)))+(((x733)*(x742)))+(((IkReal(-1.00000000000000))*(x735)*(x741)))+(((IkReal(-1.00000000000000))*(x735)*(x740)))+(((IkReal(-1.00000000000000))*(x728)*(x729))));
evalcond[4]=((((x733)*(x737)))+(((IkReal(-1.00000000000000))*(cj1)*(x732)))+(((IkReal(-1.00000000000000))*(x742)))+(x739)+(((IkReal(0.300000000000000))*(cj1)))+(((IkReal(-0.0300000000000000))*(x733)))+(((cj1)*(x734)))+(((x730)*(x733))));
evalcond[5]=((IkReal(0.00847044000000000))+(((x738)*(x742)))+(((IkReal(0.0600000000000000))*(x733)*(x739)))+(((IkReal(0.600000000000000))*(x736)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x733)*(x742)))+(((IkReal(0.0600000000000000))*(sj2)*(x729)))+(((IkReal(-1.00000000000000))*(x738)*(x739)))+(((x727)*(x740)))+(((x727)*(x741))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x743=((cj1)*(cj2));
IkReal x744=((px)*(sj3));
IkReal x745=((IkReal(0.0300000000000000))*(py));
IkReal x746=((cj3)*(px));
IkReal x747=((pz)*(sj1));
IkReal x748=((IkReal(0.313800000000000))*(py));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(sj3)*(x743)*(x748)))+(((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj3)*(x743)*(x745)))+(((px)*(x747)))+(((x743)*(x745)))+(((IkReal(-0.313800000000000))*(x746)))+(((IkReal(0.0300000000000000))*(x744))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(py)*(x747)))+(((IkReal(-0.313800000000000))*(x743)*(x744)))+(((IkReal(0.300000000000000))*(py)))+(((cj3)*(x748)))+(((IkReal(-0.0300000000000000))*(x743)*(x746)))+(((IkReal(0.0300000000000000))*(px)*(x743)))+(((IkReal(-1.00000000000000))*(sj3)*(x745))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(sj3)*(x743)*(x748)))+(((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj3)*(x743)*(x745)))+(((px)*(x747)))+(((x743)*(x745)))+(((IkReal(-0.313800000000000))*(x746)))+(((IkReal(0.0300000000000000))*(x744)))))), ((gconst0)*(((((IkReal(-1.00000000000000))*(py)*(x747)))+(((IkReal(-0.313800000000000))*(x743)*(x744)))+(((IkReal(0.300000000000000))*(py)))+(((cj3)*(x748)))+(((IkReal(-0.0300000000000000))*(x743)*(x746)))+(((IkReal(0.0300000000000000))*(px)*(x743)))+(((IkReal(-1.00000000000000))*(sj3)*(x745)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x749=IKsin(j0);
IkReal x750=IKcos(j0);
IkReal x751=((IkReal(0.0600000000000000))*(cj2));
IkReal x752=((IkReal(1.00000000000000))*(sj2));
IkReal x753=((cj1)*(pz));
IkReal x754=((IkReal(0.313800000000000))*(sj3));
IkReal x755=((IkReal(0.0300000000000000))*(cj2));
IkReal x756=((IkReal(0.0300000000000000))*(sj3));
IkReal x757=((sj1)*(sj2));
IkReal x758=((IkReal(0.313800000000000))*(cj3));
IkReal x759=((IkReal(1.00000000000000))*(cj2));
IkReal x760=((pz)*(sj1));
IkReal x761=((IkReal(0.0300000000000000))*(cj3));
IkReal x762=((IkReal(0.600000000000000))*(cj1));
IkReal x763=((px)*(x749));
IkReal x764=((px)*(x750));
IkReal x765=((py)*(x749));
IkReal x766=((py)*(x750));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj2)*(x754)))+(((IkReal(-1.00000000000000))*(cj3)*(x755)))+(((IkReal(-1.00000000000000))*(x765)))+(((IkReal(-1.00000000000000))*(x764)))+(x755));
evalcond[1]=((IkReal(0.300000000000000))+(((cj1)*(x763)))+(((IkReal(-1.00000000000000))*(x760)))+(x758)+(((IkReal(-1.00000000000000))*(x756)))+(((IkReal(-1.00000000000000))*(cj1)*(x766))));
evalcond[2]=((((cj2)*(sj1)*(x766)))+(((sj2)*(x764)))+(((sj2)*(x765)))+(((IkReal(-1.00000000000000))*(x753)*(x759)))+(((IkReal(-1.00000000000000))*(sj1)*(x759)*(x763))));
evalcond[3]=((IkReal(0.0300000000000000))+(((x757)*(x766)))+(((IkReal(-1.00000000000000))*(x761)))+(((IkReal(-1.00000000000000))*(sj1)*(x752)*(x763)))+(((IkReal(-1.00000000000000))*(x752)*(x753)))+(((IkReal(-1.00000000000000))*(x754)))+(((IkReal(-1.00000000000000))*(x759)*(x765)))+(((IkReal(-1.00000000000000))*(x759)*(x764))));
evalcond[4]=((((x757)*(x761)))+(((cj1)*(x758)))+(((IkReal(-1.00000000000000))*(x766)))+(((IkReal(-1.00000000000000))*(cj1)*(x756)))+(x763)+(((IkReal(0.300000000000000))*(cj1)))+(((IkReal(-0.0300000000000000))*(x757)))+(((x754)*(x757))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x757)*(x766)))+(((IkReal(-1.00000000000000))*(x762)*(x763)))+(((IkReal(0.0600000000000000))*(sj2)*(x753)))+(((x762)*(x766)))+(((IkReal(-1.00000000000000))*(pp)))+(((x751)*(x765)))+(((x751)*(x764)))+(((IkReal(0.0600000000000000))*(x757)*(x763)))+(((IkReal(0.600000000000000))*(x760))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x767=((IkReal(0.0300000000000000))*(cj2));
if( IKabs(((IkReal(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x768=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(px)), ((IkReal(-1.00000000000000))*(py)))));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x767)))+(x767))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x767)))+(x767))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x769=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x767)))+(x767)))));
j0array[0]=((((IkReal(-1.00000000000000))*(x768)))+(((IkReal(-1.00000000000000))*(x769))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x768)))+(x769));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x770=(px)*(px);
IkReal x771=(cj2)*(cj2);
IkReal x772=(sj2)*(sj2);
IkReal x773=IKcos(j0);
IkReal x774=(py)*(py);
IkReal x775=IKsin(j0);
IkReal x776=((IkReal(0.0300000000000000))*(cj2));
IkReal x777=((IkReal(1.00000000000000))*(x770));
IkReal x778=((IkReal(0.313800000000000))*(cj2)*(sj3));
IkReal x779=((px)*(py)*(x772));
IkReal x780=((px)*(py)*(x771));
evalcond[0]=((((x775)*(((((IkReal(-1.00000000000000))*(x780)))+(((IkReal(-1.00000000000000))*(x779)))))))+(((IkReal(-1.00000000000000))*(px)*(x778)))+(((px)*(x776)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x776)))+(((x773)*(((((IkReal(-1.00000000000000))*(x771)*(x777)))+(((IkReal(-1.00000000000000))*(x772)*(x777))))))));
evalcond[1]=((((x773)*(((x779)+(x780)))))+(((IkReal(-1.00000000000000))*(py)*(x776)))+(((x775)*(((((x771)*(x774)))+(((x772)*(x774)))))))+(((cj3)*(py)*(x776)))+(((py)*(x778))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst47;
IkReal x781=((IkReal(0.0300000000000000))*(sj3));
IkReal x782=((cj0)*(py));
IkReal x783=((pz)*(sj2));
IkReal x784=((px)*(sj0));
IkReal x785=((IkReal(0.313800000000000))*(cj3));
gconst47=IKsign(((((x781)*(x782)))+(((IkReal(-0.313800000000000))*(sj3)*(x783)))+(((IkReal(0.0300000000000000))*(x783)))+(((IkReal(-0.0300000000000000))*(cj3)*(x783)))+(((IkReal(-1.00000000000000))*(x781)*(x784)))+(((x784)*(x785)))+(((IkReal(-1.00000000000000))*(x782)*(x785)))+(((IkReal(0.300000000000000))*(x784)))+(((IkReal(-0.300000000000000))*(x782)))));
IkReal x786=((cj0)*(py));
IkReal x787=((IkReal(10.4600000000000))*(cj3));
IkReal x788=((px)*(sj0));
IkReal x789=((pz)*(sj2));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj3)*(x789)))+(((IkReal(-1.00000000000000))*(sj3)*(x788)))+(((x787)*(x788)))+(((IkReal(-10.4600000000000))*(sj3)*(x789)))+(((IkReal(-10.0000000000000))*(x786)))+(((IkReal(-1.00000000000000))*(x786)*(x787)))+(x789)+(((sj3)*(x786)))+(((IkReal(10.0000000000000))*(x788))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((((cj2)*((px)*(px))*((sj0)*(sj0))))+(((IkReal(-2.00000000000000))*(cj0)*(cj2)*(px)*(py)*(sj0)))+(((cj2)*((cj0)*(cj0))*((py)*(py))))+(((cj2)*((pz)*(pz))))));
dummyeval[0]=((((cj2)*((px)*(px))*((sj0)*(sj0))))+(((IkReal(-2.00000000000000))*(cj0)*(cj2)*(px)*(py)*(sj0)))+(((cj2)*((cj0)*(cj0))*((py)*(py))))+(((cj2)*((pz)*(pz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x790=((cj0)*(px));
IkReal x791=((py)*(sj0));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x791)))+(((IkReal(-1.00000000000000))*(x790))));
evalcond[3]=((x791)+(x790));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x792=((IkReal(0.0300000000000000))*(sj3));
IkReal x793=((cj0)*(py));
IkReal x794=((IkReal(0.0300000000000000))*(pz));
IkReal x795=((px)*(sj0));
IkReal x796=((IkReal(0.313800000000000))*(cj3));
gconst49=IKsign(((((IkReal(-1.00000000000000))*(cj3)*(x794)))+(((IkReal(-1.00000000000000))*(x792)*(x795)))+(((IkReal(-1.00000000000000))*(x793)*(x796)))+(((x792)*(x793)))+(((IkReal(0.300000000000000))*(x795)))+(x794)+(((IkReal(-0.300000000000000))*(x793)))+(((IkReal(-0.313800000000000))*(pz)*(sj3)))+(((x795)*(x796)))));
IkReal x797=((cj0)*(py));
IkReal x798=((IkReal(10.4600000000000))*(cj3));
IkReal x799=((px)*(sj0));
dummyeval[0]=((((IkReal(10.0000000000000))*(x799)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(x799)))+(((IkReal(-1.00000000000000))*(x797)*(x798)))+(((IkReal(-10.4600000000000))*(pz)*(sj3)))+(pz)+(((IkReal(-10.0000000000000))*(x797)))+(((x798)*(x799)))+(((sj3)*(x797))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign((((((px)*(px))*((sj0)*(sj0))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+((((cj0)*(cj0))*((py)*(py))))));
dummyeval[0]=(((((px)*(px))*((sj0)*(sj0))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+((((cj0)*(cj0))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x800=((IkReal(0.0300000000000000))*(sj3));
IkReal x801=((cj0)*(py));
IkReal x802=((cj3)*(pz));
IkReal x803=((px)*(sj0));
IkReal x804=((IkReal(0.313800000000000))*(cj3));
IkReal x805=((IkReal(0.313800000000000))*(sj3));
IkReal x806=((IkReal(0.0300000000000000))*(x803));
if( IKabs(((gconst48)*(((((IkReal(0.300000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(x801)))+(((IkReal(0.313800000000000))*(x802)))+(((IkReal(-1.00000000000000))*(x803)*(x805)))+(((x801)*(x805)))+(((IkReal(-1.00000000000000))*(cj3)*(x806)))+(((IkReal(0.0300000000000000))*(cj3)*(x801)))+(x806)+(((IkReal(-1.00000000000000))*(pz)*(x800))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((IkReal(-0.300000000000000))*(x803)))+(((x800)*(x803)))+(((IkReal(-0.0300000000000000))*(x802)))+(((IkReal(-1.00000000000000))*(x800)*(x801)))+(((IkReal(-1.00000000000000))*(x803)*(x804)))+(((x801)*(x804)))+(((IkReal(0.0300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x805)))+(((IkReal(0.300000000000000))*(x801))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst48)*(((((IkReal(0.300000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(x801)))+(((IkReal(0.313800000000000))*(x802)))+(((IkReal(-1.00000000000000))*(x803)*(x805)))+(((x801)*(x805)))+(((IkReal(-1.00000000000000))*(cj3)*(x806)))+(((IkReal(0.0300000000000000))*(cj3)*(x801)))+(x806)+(((IkReal(-1.00000000000000))*(pz)*(x800)))))), ((gconst48)*(((((IkReal(-0.300000000000000))*(x803)))+(((x800)*(x803)))+(((IkReal(-0.0300000000000000))*(x802)))+(((IkReal(-1.00000000000000))*(x800)*(x801)))+(((IkReal(-1.00000000000000))*(x803)*(x804)))+(((x801)*(x804)))+(((IkReal(0.0300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x805)))+(((IkReal(0.300000000000000))*(x801)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x807=IKcos(j1);
IkReal x808=IKsin(j1);
IkReal x809=((IkReal(0.313800000000000))*(sj3));
IkReal x810=((px)*(sj0));
IkReal x811=((IkReal(0.0300000000000000))*(sj3));
IkReal x812=((IkReal(1.00000000000000))*(pz));
IkReal x813=((cj0)*(py));
IkReal x814=((IkReal(0.0300000000000000))*(cj3));
IkReal x815=((IkReal(0.313800000000000))*(cj3));
IkReal x816=((cj3)*(x807));
IkReal x817=((IkReal(0.600000000000000))*(x807));
IkReal x818=((IkReal(0.0600000000000000))*(x808));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x808)*(x812)))+(((IkReal(-1.00000000000000))*(x807)*(x813)))+(((IkReal(-1.00000000000000))*(x811)))+(((x807)*(x810)))+(x815));
evalcond[1]=((((IkReal(-1.00000000000000))*(x807)*(x809)))+(((IkReal(-1.00000000000000))*(x808)*(x811)))+(((IkReal(0.0300000000000000))*(x807)))+(((IkReal(-1.00000000000000))*(x812)))+(((x808)*(x815)))+(((IkReal(-1.00000000000000))*(x807)*(x814)))+(((IkReal(0.300000000000000))*(x808))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x808)*(x810)))+(((IkReal(-1.00000000000000))*(x814)))+(((x808)*(x813)))+(((IkReal(-1.00000000000000))*(x807)*(x812)))+(((IkReal(-1.00000000000000))*(x809))));
evalcond[3]=((((IkReal(-0.0300000000000000))*(x808)))+(((x808)*(x814)))+(((IkReal(-1.00000000000000))*(x813)))+(((x807)*(x815)))+(((IkReal(-1.00000000000000))*(x807)*(x811)))+(x810)+(((x808)*(x809)))+(((IkReal(0.300000000000000))*(x807))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)*(x808)))+(((IkReal(0.0600000000000000))*(pz)*(x807)))+(((x810)*(x818)))+(((x813)*(x817)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x810)*(x817)))+(((IkReal(-1.00000000000000))*(x813)*(x818))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x819=(cj3)*(cj3);
IkReal x820=(sj3)*(sj3);
IkReal x821=((cj3)*(sj3));
if( IKabs(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(-0.0950400000000000))*(sj3)))+(((IkReal(0.00941400000000000))*(x820)))+(((px)*(pz)*(sj0)))+(((IkReal(0.000414000000000000))*(cj3)))+(((IkReal(-0.0975704400000000))*(x821)))+(((IkReal(-0.00941400000000000))*(x819)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj3)))+(((IkReal(-0.188280000000000))*(cj3)))+(((IkReal(0.0188280000000000))*(x821)))+(((IkReal(-0.000900000000000000))*(x820)))+(((IkReal(-0.0984704400000000))*(x819)))+((pz)*(pz)))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(-0.0950400000000000))*(sj3)))+(((IkReal(0.00941400000000000))*(x820)))+(((px)*(pz)*(sj0)))+(((IkReal(0.000414000000000000))*(cj3)))+(((IkReal(-0.0975704400000000))*(x821)))+(((IkReal(-0.00941400000000000))*(x819)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(pz)))))), ((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj3)))+(((IkReal(-0.188280000000000))*(cj3)))+(((IkReal(0.0188280000000000))*(x821)))+(((IkReal(-0.000900000000000000))*(x820)))+(((IkReal(-0.0984704400000000))*(x819)))+((pz)*(pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x822=IKcos(j1);
IkReal x823=IKsin(j1);
IkReal x824=((IkReal(0.313800000000000))*(sj3));
IkReal x825=((px)*(sj0));
IkReal x826=((IkReal(0.0300000000000000))*(sj3));
IkReal x827=((IkReal(1.00000000000000))*(pz));
IkReal x828=((cj0)*(py));
IkReal x829=((IkReal(0.0300000000000000))*(cj3));
IkReal x830=((IkReal(0.313800000000000))*(cj3));
IkReal x831=((cj3)*(x822));
IkReal x832=((IkReal(0.600000000000000))*(x822));
IkReal x833=((IkReal(0.0600000000000000))*(x823));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x822)*(x828)))+(((IkReal(-1.00000000000000))*(x826)))+(((IkReal(-1.00000000000000))*(x823)*(x827)))+(((x822)*(x825)))+(x830));
evalcond[1]=((((IkReal(-1.00000000000000))*(x822)*(x829)))+(((IkReal(-1.00000000000000))*(x822)*(x824)))+(((IkReal(-1.00000000000000))*(x827)))+(((IkReal(-1.00000000000000))*(x823)*(x826)))+(((IkReal(0.300000000000000))*(x823)))+(((IkReal(0.0300000000000000))*(x822)))+(((x823)*(x830))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x822)*(x827)))+(((IkReal(-1.00000000000000))*(x823)*(x825)))+(((IkReal(-1.00000000000000))*(x829)))+(((IkReal(-1.00000000000000))*(x824)))+(((x823)*(x828))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x822)*(x826)))+(((IkReal(0.300000000000000))*(x822)))+(((IkReal(-1.00000000000000))*(x828)))+(((x822)*(x830)))+(((x823)*(x829)))+(((x823)*(x824)))+(((IkReal(-0.0300000000000000))*(x823)))+(x825));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x828)*(x833)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(pz)*(x822)))+(((IkReal(0.600000000000000))*(pz)*(x823)))+(((IkReal(-1.00000000000000))*(x825)*(x832)))+(((x828)*(x832)))+(((x825)*(x833))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x834=((((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=x834;
evalcond[3]=x834;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
IkReal x835=((cj0)*(py));
IkReal x836=((IkReal(0.313800000000000))*(sj3));
IkReal x837=((IkReal(0.0300000000000000))*(px)*(sj0));
gconst51=IKsign(((((IkReal(-0.0300000000000000))*(cj3)*(x835)))+(((IkReal(-0.313800000000000))*(cj3)*(pz)))+(((IkReal(-0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x835)*(x836)))+(((IkReal(-1.00000000000000))*(x837)))+(((cj3)*(x837)))+(((IkReal(0.0300000000000000))*(x835)))+(((px)*(sj0)*(x836)))+(((IkReal(0.0300000000000000))*(pz)*(sj3)))));
IkReal x838=((cj0)*(py));
IkReal x839=((px)*(sj0));
IkReal x840=((IkReal(10.4600000000000))*(sj3));
dummyeval[0]=((((IkReal(-10.4600000000000))*(cj3)*(pz)))+(((x839)*(x840)))+(((IkReal(-10.0000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x839)))+(((cj3)*(x839)))+(((IkReal(-1.00000000000000))*(x838)*(x840)))+(((pz)*(sj3)))+(x838)+(((IkReal(-1.00000000000000))*(cj3)*(x838))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign((((((px)*(px))*((sj0)*(sj0))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+((((cj0)*(cj0))*((py)*(py))))));
dummyeval[0]=(((((px)*(px))*((sj0)*(sj0))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+((((cj0)*(cj0))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x841=x834;
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x841;
evalcond[3]=x841;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x842=((cj0)*(py));
IkReal x843=((px)*(sj0));
dummyeval[0]=((((IkReal(-1.00000000000000))*((x843)*(x843))))+(((IkReal(2.00000000000000))*(x842)*(x843)))+(((IkReal(-1.00000000000000))*((x842)*(x842)))));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x842)))+(x843));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x844=((IkReal(1.00000000000000))*(pp));
IkReal x845=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x844))));
evalcond[2]=x845;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x845;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x844))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x846=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x846))));
evalcond[2]=py;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x846))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x847=((IkReal(1.00000000000000))*(pp));
IkReal x848=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(py)));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x847))));
evalcond[2]=x848;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x848;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x847))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x849=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x849))));
evalcond[2]=px;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x849))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x850=((IkReal(5000.00000000000))*(pp));
IkReal x851=((px)*(sj0));
IkReal x852=((cj0)*(py));
if( IKabs(((((IKabs(((((IkReal(-300.000000000000))*((x851)*(x851))))+(((IkReal(-300.000000000000))*((x852)*(x852))))+(((IkReal(600.000000000000))*(x851)*(x852))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x851)*(x851))))+(((IkReal(-300.000000000000))*((x852)*(x852))))+(((IkReal(600.000000000000))*(x851)*(x852)))))):(IkReal)1.0e30))*(((((x850)*(x851)))+(((IkReal(-1883.75220000000))*(x851)))+(((IkReal(-1.00000000000000))*(x850)*(x852)))+(((IkReal(1883.75220000000))*(x852))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x852)))+(((IkReal(5000.00000000000))*(x851))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x852)))+(((IkReal(5000.00000000000))*(x851)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-300.000000000000))*((x851)*(x851))))+(((IkReal(-300.000000000000))*((x852)*(x852))))+(((IkReal(600.000000000000))*(x851)*(x852))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x851)*(x851))))+(((IkReal(-300.000000000000))*((x852)*(x852))))+(((IkReal(600.000000000000))*(x851)*(x852)))))):(IkReal)1.0e30))*(((((x850)*(x851)))+(((IkReal(-1883.75220000000))*(x851)))+(((IkReal(-1.00000000000000))*(x850)*(x852)))+(((IkReal(1883.75220000000))*(x852)))))))+IKsqr(((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x852)))+(((IkReal(5000.00000000000))*(x851))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x852)))+(((IkReal(5000.00000000000))*(x851)))))):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((IkReal(-300.000000000000))*((x851)*(x851))))+(((IkReal(-300.000000000000))*((x852)*(x852))))+(((IkReal(600.000000000000))*(x851)*(x852))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x851)*(x851))))+(((IkReal(-300.000000000000))*((x852)*(x852))))+(((IkReal(600.000000000000))*(x851)*(x852)))))):(IkReal)1.0e30))*(((((x850)*(x851)))+(((IkReal(-1883.75220000000))*(x851)))+(((IkReal(-1.00000000000000))*(x850)*(x852)))+(((IkReal(1883.75220000000))*(x852)))))), ((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x852)))+(((IkReal(5000.00000000000))*(x851))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x852)))+(((IkReal(5000.00000000000))*(x851)))))):(IkReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x853=IKcos(j1);
IkReal x854=IKsin(j1);
IkReal x855=((cj0)*(py));
IkReal x856=((px)*(sj0));
IkReal x857=((IkReal(0.600000000000000))*(x853));
IkReal x858=((IkReal(0.0600000000000000))*(x854));
evalcond[0]=((IkReal(0.613800000000000))+(((x853)*(x856)))+(((IkReal(-1.00000000000000))*(x853)*(x855))));
evalcond[1]=((IkReal(0.613800000000000))*(x854));
evalcond[2]=((((IkReal(-1.00000000000000))*(x854)*(x855)))+(((x854)*(x856))));
evalcond[3]=((((IkReal(0.613800000000000))*(x853)))+(((IkReal(-1.00000000000000))*(x855)))+(x856));
evalcond[4]=((IkReal(0.00847044000000000))+(((x855)*(x858)))+(((x855)*(x857)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x856)*(x857)))+(((IkReal(-1.00000000000000))*(x856)*(x858))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x859=((cj0)*(py));
IkReal x860=((px)*(sj0));
if( IKabs(((((IKabs(((((IkReal(-184.140000000000))*(x860)))+(((IkReal(184.140000000000))*(x859))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x860)))+(((IkReal(184.140000000000))*(x859)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x859)*(x859))))+(((IkReal(6000.00000000000))*(x859)*(x860)))+(((IkReal(-3000.00000000000))*((x860)*(x860))))+(((IkReal(3069.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.62919517758227))*(x859)))+(((IkReal(-1.62919517758227))*(x860))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-184.140000000000))*(x860)))+(((IkReal(184.140000000000))*(x859))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x860)))+(((IkReal(184.140000000000))*(x859)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x859)*(x859))))+(((IkReal(6000.00000000000))*(x859)*(x860)))+(((IkReal(-3000.00000000000))*((x860)*(x860))))+(((IkReal(3069.00000000000))*(pp)))))))+IKsqr(((((IkReal(1.62919517758227))*(x859)))+(((IkReal(-1.62919517758227))*(x860)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((IkReal(-184.140000000000))*(x860)))+(((IkReal(184.140000000000))*(x859))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x860)))+(((IkReal(184.140000000000))*(x859)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x859)*(x859))))+(((IkReal(6000.00000000000))*(x859)*(x860)))+(((IkReal(-3000.00000000000))*((x860)*(x860))))+(((IkReal(3069.00000000000))*(pp)))))), ((((IkReal(1.62919517758227))*(x859)))+(((IkReal(-1.62919517758227))*(x860)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x861=IKcos(j1);
IkReal x862=IKsin(j1);
IkReal x863=((cj0)*(py));
IkReal x864=((px)*(sj0));
IkReal x865=((IkReal(0.600000000000000))*(x861));
IkReal x866=((IkReal(0.0600000000000000))*(x862));
evalcond[0]=((IkReal(0.613800000000000))+(((IkReal(-1.00000000000000))*(x861)*(x863)))+(((x861)*(x864))));
evalcond[1]=((IkReal(0.613800000000000))*(x862));
evalcond[2]=((((x862)*(x864)))+(((IkReal(-1.00000000000000))*(x862)*(x863))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x863)))+(((IkReal(0.613800000000000))*(x861)))+(x864));
evalcond[4]=((IkReal(0.00847044000000000))+(((x863)*(x865)))+(((x863)*(x866)))+(((IkReal(-1.00000000000000))*(x864)*(x866)))+(((IkReal(-1.00000000000000))*(x864)*(x865)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x867=((cj0)*(py));
IkReal x868=((IkReal(0.0300000000000000))*(sj3));
IkReal x869=((IkReal(0.313800000000000))*(cj3));
IkReal x870=((IkReal(0.313800000000000))*(sj3));
IkReal x871=((IkReal(0.0300000000000000))*(pz));
IkReal x872=((px)*(sj0));
IkReal x873=((IkReal(0.0300000000000000))*(x872));
if( IKabs(((gconst50)*(((((IkReal(0.0300000000000000))*(x867)))+(((x870)*(x872)))+(((cj3)*(x873)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x868)))+(((IkReal(-0.0300000000000000))*(cj3)*(x867)))+(((IkReal(-1.00000000000000))*(x867)*(x870)))+(((pz)*(x869)))+(((IkReal(-1.00000000000000))*(x873))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((IkReal(-0.300000000000000))*(x872)))+(((IkReal(0.300000000000000))*(x867)))+(((x867)*(x869)))+(((x868)*(x872)))+(((cj3)*(x871)))+(((IkReal(-1.00000000000000))*(x869)*(x872)))+(((IkReal(-1.00000000000000))*(x867)*(x868)))+(((pz)*(x870)))+(((IkReal(-1.00000000000000))*(x871))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst50)*(((((IkReal(0.0300000000000000))*(x867)))+(((x870)*(x872)))+(((cj3)*(x873)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x868)))+(((IkReal(-0.0300000000000000))*(cj3)*(x867)))+(((IkReal(-1.00000000000000))*(x867)*(x870)))+(((pz)*(x869)))+(((IkReal(-1.00000000000000))*(x873)))))), ((gconst50)*(((((IkReal(-0.300000000000000))*(x872)))+(((IkReal(0.300000000000000))*(x867)))+(((x867)*(x869)))+(((x868)*(x872)))+(((cj3)*(x871)))+(((IkReal(-1.00000000000000))*(x869)*(x872)))+(((IkReal(-1.00000000000000))*(x867)*(x868)))+(((pz)*(x870)))+(((IkReal(-1.00000000000000))*(x871)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x874=IKcos(j1);
IkReal x875=IKsin(j1);
IkReal x876=((px)*(sj0));
IkReal x877=((IkReal(0.313800000000000))*(sj3));
IkReal x878=((IkReal(0.0300000000000000))*(sj3));
IkReal x879=((IkReal(1.00000000000000))*(pz));
IkReal x880=((IkReal(0.313800000000000))*(cj3));
IkReal x881=((IkReal(0.0300000000000000))*(cj3));
IkReal x882=((IkReal(0.0300000000000000))*(x874));
IkReal x883=((IkReal(0.313800000000000))*(x875));
IkReal x884=((pz)*(x874));
IkReal x885=((IkReal(1.00000000000000))*(cj0)*(py));
IkReal x886=((IkReal(0.0600000000000000))*(x875));
IkReal x887=((cj0)*(py)*(x874));
evalcond[0]=((IkReal(0.300000000000000))+(((x874)*(x876)))+(((IkReal(-1.00000000000000))*(x875)*(x879)))+(x880)+(((IkReal(-1.00000000000000))*(x874)*(x885)))+(((IkReal(-1.00000000000000))*(x878))));
evalcond[1]=((((IkReal(0.300000000000000))*(x875)))+(((x874)*(x881)))+(((x874)*(x877)))+(((IkReal(-1.00000000000000))*(x882)))+(((IkReal(-1.00000000000000))*(x875)*(x878)))+(((x875)*(x880)))+(((IkReal(-1.00000000000000))*(x879))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x881)))+(((x875)*(x876)))+(x884)+(((IkReal(-1.00000000000000))*(x877)))+(((IkReal(-1.00000000000000))*(x875)*(x885))));
evalcond[3]=((((IkReal(0.300000000000000))*(x874)))+(((x874)*(x880)))+(((IkReal(0.0300000000000000))*(x875)))+(((IkReal(-1.00000000000000))*(x885)))+(((IkReal(-1.00000000000000))*(x875)*(x877)))+(((IkReal(-1.00000000000000))*(x874)*(x878)))+(x876)+(((IkReal(-1.00000000000000))*(x875)*(x881))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x887)))+(((IkReal(-0.600000000000000))*(x874)*(x876)))+(((IkReal(-1.00000000000000))*(x876)*(x886)))+(((IkReal(-0.0600000000000000))*(x884)))+(((IkReal(-1.00000000000000))*(pp)))+(((cj0)*(py)*(x886)))+(((IkReal(0.600000000000000))*(pz)*(x875))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x888=(sj3)*(sj3);
IkReal x889=(cj3)*(cj3);
IkReal x890=((cj3)*(sj3));
if( IKabs(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(0.0984704400000000))*(x888)))+(((IkReal(0.000900000000000000))*(x889)))+(((IkReal(-0.00180000000000000))*(cj3)))+(((IkReal(0.0188280000000000))*(x890)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-0.0188280000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(-0.0950400000000000))*(sj3)))+(((px)*(pz)*(sj0)))+(((IkReal(-0.0975704400000000))*(x890)))+(((IkReal(0.00941400000000000))*(x888)))+(((IkReal(0.000414000000000000))*(cj3)))+(((IkReal(-0.00941400000000000))*(x889)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(0.0984704400000000))*(x888)))+(((IkReal(0.000900000000000000))*(x889)))+(((IkReal(-0.00180000000000000))*(cj3)))+(((IkReal(0.0188280000000000))*(x890)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-0.0188280000000000))*(sj3)))))), ((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(-0.0950400000000000))*(sj3)))+(((px)*(pz)*(sj0)))+(((IkReal(-0.0975704400000000))*(x890)))+(((IkReal(0.00941400000000000))*(x888)))+(((IkReal(0.000414000000000000))*(cj3)))+(((IkReal(-0.00941400000000000))*(x889)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(pz)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x891=IKcos(j1);
IkReal x892=IKsin(j1);
IkReal x893=((px)*(sj0));
IkReal x894=((IkReal(0.313800000000000))*(sj3));
IkReal x895=((IkReal(0.0300000000000000))*(sj3));
IkReal x896=((IkReal(1.00000000000000))*(pz));
IkReal x897=((IkReal(0.313800000000000))*(cj3));
IkReal x898=((IkReal(0.0300000000000000))*(cj3));
IkReal x899=((IkReal(0.0300000000000000))*(x891));
IkReal x900=((IkReal(0.313800000000000))*(x892));
IkReal x901=((pz)*(x891));
IkReal x902=((IkReal(1.00000000000000))*(cj0)*(py));
IkReal x903=((IkReal(0.0600000000000000))*(x892));
IkReal x904=((cj0)*(py)*(x891));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x891)*(x902)))+(((IkReal(-1.00000000000000))*(x892)*(x896)))+(((IkReal(-1.00000000000000))*(x895)))+(((x891)*(x893)))+(x897));
evalcond[1]=((((IkReal(-1.00000000000000))*(x892)*(x895)))+(((IkReal(-1.00000000000000))*(x896)))+(((IkReal(-1.00000000000000))*(x899)))+(((IkReal(0.300000000000000))*(x892)))+(((x892)*(x897)))+(((x891)*(x894)))+(((x891)*(x898))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x894)))+(((IkReal(-1.00000000000000))*(x898)))+(((IkReal(-1.00000000000000))*(x892)*(x902)))+(((x892)*(x893)))+(x901));
evalcond[3]=((((IkReal(-1.00000000000000))*(x892)*(x894)))+(((IkReal(-1.00000000000000))*(x892)*(x898)))+(((IkReal(-1.00000000000000))*(x902)))+(((IkReal(0.300000000000000))*(x891)))+(((IkReal(0.0300000000000000))*(x892)))+(((x891)*(x897)))+(x893)+(((IkReal(-1.00000000000000))*(x891)*(x895))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x891)*(x893)))+(((IkReal(-1.00000000000000))*(x893)*(x903)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x901)))+(((IkReal(0.600000000000000))*(pz)*(x892)))+(((cj0)*(py)*(x903)))+(((IkReal(0.600000000000000))*(x904))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x905=((IkReal(0.0300000000000000))*(sj3));
IkReal x906=((cj0)*(sj2));
IkReal x907=((IkReal(0.313800000000000))*(cj3));
IkReal x908=((py)*(sj2));
IkReal x909=((cj2)*(pz));
IkReal x910=((cj0)*(cj2)*(py));
IkReal x911=((cj2)*(px)*(sj0));
if( IKabs(((gconst46)*(((((sj0)*(x906)*((px)*(px))))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(py)*(x906)))+(((px)*(x908)*((sj0)*(sj0))))+(((x907)*(x909)))+(((IkReal(-1.00000000000000))*(sj0)*(x906)*((py)*(py))))+(((IkReal(0.300000000000000))*(x909)))+(((IkReal(-1.00000000000000))*(x905)*(x909))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((pz)*(sj0)*(x908)))+(((IkReal(-0.300000000000000))*(x911)))+(((x907)*(x910)))+(((IkReal(-1.00000000000000))*(x905)*(x910)))+(((IkReal(-1.00000000000000))*(x907)*(x911)))+(((IkReal(0.300000000000000))*(x910)))+(((x905)*(x911)))+(((px)*(pz)*(x906))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst46)*(((((sj0)*(x906)*((px)*(px))))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(py)*(x906)))+(((px)*(x908)*((sj0)*(sj0))))+(((x907)*(x909)))+(((IkReal(-1.00000000000000))*(sj0)*(x906)*((py)*(py))))+(((IkReal(0.300000000000000))*(x909)))+(((IkReal(-1.00000000000000))*(x905)*(x909)))))), ((gconst46)*(((((pz)*(sj0)*(x908)))+(((IkReal(-0.300000000000000))*(x911)))+(((x907)*(x910)))+(((IkReal(-1.00000000000000))*(x905)*(x910)))+(((IkReal(-1.00000000000000))*(x907)*(x911)))+(((IkReal(0.300000000000000))*(x910)))+(((x905)*(x911)))+(((px)*(pz)*(x906)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x912=IKcos(j1);
IkReal x913=IKsin(j1);
IkReal x914=((cj0)*(sj2));
IkReal x915=((IkReal(0.0300000000000000))*(sj3));
IkReal x916=((IkReal(0.313800000000000))*(cj3));
IkReal x917=((IkReal(0.313800000000000))*(sj3));
IkReal x918=((px)*(sj0));
IkReal x919=((IkReal(1.00000000000000))*(cj2));
IkReal x920=((cj0)*(px));
IkReal x921=((IkReal(1.00000000000000))*(pz));
IkReal x922=((IkReal(0.0300000000000000))*(cj3));
IkReal x923=((cj2)*(py)*(sj0));
IkReal x924=((py)*(x913));
IkReal x925=((sj2)*(x913));
IkReal x926=((sj2)*(x912));
IkReal x927=((IkReal(1.00000000000000))*(cj0)*(py));
IkReal x928=((IkReal(0.600000000000000))*(x912));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x912)*(x927)))+(((IkReal(-1.00000000000000))*(x915)))+(((IkReal(-1.00000000000000))*(x913)*(x921)))+(((x912)*(x918)))+(x916));
evalcond[1]=((((IkReal(-1.00000000000000))*(pz)*(x912)*(x919)))+(((IkReal(-1.00000000000000))*(x913)*(x918)*(x919)))+(((px)*(x914)))+(((cj0)*(cj2)*(x924)))+(((py)*(sj0)*(sj2))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x921)))+(((IkReal(0.0300000000000000))*(x926)))+(((IkReal(-1.00000000000000))*(x913)*(x915)))+(((x913)*(x916)))+(((IkReal(0.300000000000000))*(x913)))+(((IkReal(-1.00000000000000))*(x917)*(x926)))+(((IkReal(-1.00000000000000))*(x922)*(x926))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x922)))+(((IkReal(-1.00000000000000))*(x918)*(x925)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x919)))+(((IkReal(-1.00000000000000))*(x917)))+(((x914)*(x924)))+(((IkReal(-1.00000000000000))*(x919)*(x920)))+(((IkReal(-1.00000000000000))*(x921)*(x926))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x927)))+(((IkReal(-0.0300000000000000))*(x925)))+(((x917)*(x925)))+(((IkReal(-1.00000000000000))*(x912)*(x915)))+(((x922)*(x925)))+(((x912)*(x916)))+(((IkReal(0.300000000000000))*(x912)))+(x918));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(cj2)*(x920)))+(((cj0)*(py)*(x928)))+(((IkReal(0.600000000000000))*(pz)*(x913)))+(((IkReal(0.0600000000000000))*(x918)*(x925)))+(((IkReal(0.0600000000000000))*(x923)))+(((IkReal(0.0600000000000000))*(pz)*(x926)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x918)*(x928)))+(((IkReal(-0.0600000000000000))*(x914)*(x924))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x929=(cj3)*(cj3);
IkReal x930=(sj3)*(sj3);
IkReal x931=((sj2)*(sj3));
IkReal x932=((IkReal(0.00941400000000000))*(sj2));
if( IKabs(((gconst47)*(((((IkReal(0.000414000000000000))*(cj3)*(sj2)))+(((IkReal(-0.0950400000000000))*(x931)))+(((px)*(pz)*(sj0)))+(((x930)*(x932)))+(((IkReal(-1.00000000000000))*(x929)*(x932)))+(((IkReal(-0.0975704400000000))*(cj3)*(x931)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(pz)))+(((IkReal(0.00900000000000000))*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0188280000000000))*(cj3)*(sj3)))+(((IkReal(0.0180000000000000))*(sj3)))+(((IkReal(-0.188280000000000))*(cj3)))+(((IkReal(-0.000900000000000000))*(x930)))+((pz)*(pz))+(((IkReal(-0.0984704400000000))*(x929))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst47)*(((((IkReal(0.000414000000000000))*(cj3)*(sj2)))+(((IkReal(-0.0950400000000000))*(x931)))+(((px)*(pz)*(sj0)))+(((x930)*(x932)))+(((IkReal(-1.00000000000000))*(x929)*(x932)))+(((IkReal(-0.0975704400000000))*(cj3)*(x931)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(pz)))+(((IkReal(0.00900000000000000))*(sj2)))))), ((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0188280000000000))*(cj3)*(sj3)))+(((IkReal(0.0180000000000000))*(sj3)))+(((IkReal(-0.188280000000000))*(cj3)))+(((IkReal(-0.000900000000000000))*(x930)))+((pz)*(pz))+(((IkReal(-0.0984704400000000))*(x929)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x933=IKcos(j1);
IkReal x934=IKsin(j1);
IkReal x935=((cj0)*(sj2));
IkReal x936=((IkReal(0.0300000000000000))*(sj3));
IkReal x937=((IkReal(0.313800000000000))*(cj3));
IkReal x938=((IkReal(0.313800000000000))*(sj3));
IkReal x939=((px)*(sj0));
IkReal x940=((IkReal(1.00000000000000))*(cj2));
IkReal x941=((cj0)*(px));
IkReal x942=((IkReal(1.00000000000000))*(pz));
IkReal x943=((IkReal(0.0300000000000000))*(cj3));
IkReal x944=((cj2)*(py)*(sj0));
IkReal x945=((py)*(x934));
IkReal x946=((sj2)*(x934));
IkReal x947=((sj2)*(x933));
IkReal x948=((IkReal(1.00000000000000))*(cj0)*(py));
IkReal x949=((IkReal(0.600000000000000))*(x933));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x933)*(x948)))+(x937)+(((x933)*(x939)))+(((IkReal(-1.00000000000000))*(x934)*(x942)))+(((IkReal(-1.00000000000000))*(x936))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x934)*(x939)*(x940)))+(((cj0)*(cj2)*(x945)))+(((px)*(x935)))+(((py)*(sj0)*(sj2)))+(((IkReal(-1.00000000000000))*(pz)*(x933)*(x940))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x942)))+(((IkReal(0.0300000000000000))*(x947)))+(((IkReal(-1.00000000000000))*(x938)*(x947)))+(((IkReal(0.300000000000000))*(x934)))+(((IkReal(-1.00000000000000))*(x934)*(x936)))+(((IkReal(-1.00000000000000))*(x943)*(x947)))+(((x934)*(x937))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x940)))+(((IkReal(-1.00000000000000))*(x943)))+(((IkReal(-1.00000000000000))*(x939)*(x946)))+(((IkReal(-1.00000000000000))*(x942)*(x947)))+(((x935)*(x945)))+(((IkReal(-1.00000000000000))*(x940)*(x941)))+(((IkReal(-1.00000000000000))*(x938))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x948)))+(((x938)*(x946)))+(((IkReal(0.300000000000000))*(x933)))+(((x943)*(x946)))+(((IkReal(-0.0300000000000000))*(x946)))+(((IkReal(-1.00000000000000))*(x933)*(x936)))+(x939)+(((x933)*(x937))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(cj2)*(x941)))+(((IkReal(-1.00000000000000))*(x939)*(x949)))+(((IkReal(0.0600000000000000))*(x944)))+(((IkReal(0.600000000000000))*(pz)*(x934)))+(((cj0)*(py)*(x949)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x935)*(x945)))+(((IkReal(0.0600000000000000))*(pz)*(x947)))+(((IkReal(0.0600000000000000))*(x939)*(x946))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x950=((IkReal(0.0300000000000000))*(cj2));
if( IKabs(((IkReal(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x951=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(px)), ((IkReal(-1.00000000000000))*(py)))));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x950)))+(x950))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x950)))+(x950))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x952=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x950)))+(x950)))));
j0array[0]=((((IkReal(-1.00000000000000))*(x952)))+(((IkReal(-1.00000000000000))*(x951))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x951)))+(x952));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst47;
IkReal x953=((IkReal(0.0300000000000000))*(sj3));
IkReal x954=((cj0)*(py));
IkReal x955=((pz)*(sj2));
IkReal x956=((px)*(sj0));
IkReal x957=((IkReal(0.313800000000000))*(cj3));
gconst47=IKsign(((((IkReal(0.300000000000000))*(x956)))+(((IkReal(-0.0300000000000000))*(cj3)*(x955)))+(((x956)*(x957)))+(((IkReal(-1.00000000000000))*(x953)*(x956)))+(((IkReal(0.0300000000000000))*(x955)))+(((IkReal(-0.313800000000000))*(sj3)*(x955)))+(((IkReal(-1.00000000000000))*(x954)*(x957)))+(((IkReal(-0.300000000000000))*(x954)))+(((x953)*(x954)))));
IkReal x958=((cj0)*(py));
IkReal x959=((IkReal(10.4600000000000))*(cj3));
IkReal x960=((px)*(sj0));
IkReal x961=((pz)*(sj2));
dummyeval[0]=((((IkReal(10.0000000000000))*(x960)))+(((IkReal(-1.00000000000000))*(x958)*(x959)))+(((x959)*(x960)))+(((sj3)*(x958)))+(((IkReal(-10.0000000000000))*(x958)))+(((IkReal(-1.00000000000000))*(sj3)*(x960)))+(x961)+(((IkReal(-1.00000000000000))*(cj3)*(x961)))+(((IkReal(-10.4600000000000))*(sj3)*(x961))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((((cj2)*((px)*(px))*((sj0)*(sj0))))+(((IkReal(-2.00000000000000))*(cj0)*(cj2)*(px)*(py)*(sj0)))+(((cj2)*((cj0)*(cj0))*((py)*(py))))+(((cj2)*((pz)*(pz))))));
dummyeval[0]=((((cj2)*((px)*(px))*((sj0)*(sj0))))+(((IkReal(-2.00000000000000))*(cj0)*(cj2)*(px)*(py)*(sj0)))+(((cj2)*((cj0)*(cj0))*((py)*(py))))+(((cj2)*((pz)*(pz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x962=((cj0)*(px));
IkReal x963=((py)*(sj0));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x963)))+(((IkReal(-1.00000000000000))*(x962))));
evalcond[3]=((x962)+(x963));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x964=((IkReal(0.0300000000000000))*(sj3));
IkReal x965=((cj0)*(py));
IkReal x966=((IkReal(0.0300000000000000))*(pz));
IkReal x967=((px)*(sj0));
IkReal x968=((IkReal(0.313800000000000))*(cj3));
gconst49=IKsign(((((IkReal(-1.00000000000000))*(cj3)*(x966)))+(((IkReal(-1.00000000000000))*(x965)*(x968)))+(((IkReal(0.300000000000000))*(x967)))+(((IkReal(-1.00000000000000))*(x964)*(x967)))+(((x967)*(x968)))+(((x964)*(x965)))+(x966)+(((IkReal(-0.313800000000000))*(pz)*(sj3)))+(((IkReal(-0.300000000000000))*(x965)))));
IkReal x969=((cj0)*(py));
IkReal x970=((IkReal(10.4600000000000))*(cj3));
IkReal x971=((px)*(sj0));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x969)*(x970)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(10.0000000000000))*(x971)))+(((IkReal(-10.4600000000000))*(pz)*(sj3)))+(pz)+(((IkReal(-1.00000000000000))*(sj3)*(x971)))+(((sj3)*(x969)))+(((x970)*(x971)))+(((IkReal(-10.0000000000000))*(x969))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign((((((px)*(px))*((sj0)*(sj0))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+((((cj0)*(cj0))*((py)*(py))))));
dummyeval[0]=(((((px)*(px))*((sj0)*(sj0))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+((((cj0)*(cj0))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x972=((IkReal(0.0300000000000000))*(sj3));
IkReal x973=((cj0)*(py));
IkReal x974=((cj3)*(pz));
IkReal x975=((px)*(sj0));
IkReal x976=((IkReal(0.313800000000000))*(cj3));
IkReal x977=((IkReal(0.313800000000000))*(sj3));
IkReal x978=((IkReal(0.0300000000000000))*(x975));
if( IKabs(((gconst48)*(((((IkReal(0.313800000000000))*(x974)))+(((IkReal(-1.00000000000000))*(pz)*(x972)))+(((IkReal(-1.00000000000000))*(cj3)*(x978)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(0.0300000000000000))*(cj3)*(x973)))+(((x973)*(x977)))+(x978)+(((IkReal(-1.00000000000000))*(x975)*(x977)))+(((IkReal(-0.0300000000000000))*(x973))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((IkReal(0.300000000000000))*(x973)))+(((IkReal(-1.00000000000000))*(pz)*(x977)))+(((x973)*(x976)))+(((IkReal(-1.00000000000000))*(x972)*(x973)))+(((IkReal(0.0300000000000000))*(pz)))+(((IkReal(-0.300000000000000))*(x975)))+(((IkReal(-1.00000000000000))*(x975)*(x976)))+(((IkReal(-0.0300000000000000))*(x974)))+(((x972)*(x975))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst48)*(((((IkReal(0.313800000000000))*(x974)))+(((IkReal(-1.00000000000000))*(pz)*(x972)))+(((IkReal(-1.00000000000000))*(cj3)*(x978)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(0.0300000000000000))*(cj3)*(x973)))+(((x973)*(x977)))+(x978)+(((IkReal(-1.00000000000000))*(x975)*(x977)))+(((IkReal(-0.0300000000000000))*(x973)))))), ((gconst48)*(((((IkReal(0.300000000000000))*(x973)))+(((IkReal(-1.00000000000000))*(pz)*(x977)))+(((x973)*(x976)))+(((IkReal(-1.00000000000000))*(x972)*(x973)))+(((IkReal(0.0300000000000000))*(pz)))+(((IkReal(-0.300000000000000))*(x975)))+(((IkReal(-1.00000000000000))*(x975)*(x976)))+(((IkReal(-0.0300000000000000))*(x974)))+(((x972)*(x975)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x979=IKcos(j1);
IkReal x980=IKsin(j1);
IkReal x981=((IkReal(0.313800000000000))*(sj3));
IkReal x982=((px)*(sj0));
IkReal x983=((IkReal(0.0300000000000000))*(sj3));
IkReal x984=((IkReal(1.00000000000000))*(pz));
IkReal x985=((cj0)*(py));
IkReal x986=((IkReal(0.0300000000000000))*(cj3));
IkReal x987=((IkReal(0.313800000000000))*(cj3));
IkReal x988=((cj3)*(x979));
IkReal x989=((IkReal(0.600000000000000))*(x979));
IkReal x990=((IkReal(0.0600000000000000))*(x980));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x983)))+(((IkReal(-1.00000000000000))*(x979)*(x985)))+(((x979)*(x982)))+(((IkReal(-1.00000000000000))*(x980)*(x984)))+(x987));
evalcond[1]=((((IkReal(-1.00000000000000))*(x984)))+(((IkReal(0.300000000000000))*(x980)))+(((IkReal(-1.00000000000000))*(x980)*(x983)))+(((IkReal(0.0300000000000000))*(x979)))+(((IkReal(-1.00000000000000))*(x979)*(x986)))+(((IkReal(-1.00000000000000))*(x979)*(x981)))+(((x980)*(x987))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x986)))+(((IkReal(-1.00000000000000))*(x981)))+(((IkReal(-1.00000000000000))*(x980)*(x982)))+(((IkReal(-1.00000000000000))*(x979)*(x984)))+(((x980)*(x985))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x985)))+(((IkReal(0.300000000000000))*(x979)))+(((x979)*(x987)))+(((IkReal(-1.00000000000000))*(x979)*(x983)))+(((x980)*(x981)))+(((x980)*(x986)))+(x982)+(((IkReal(-0.0300000000000000))*(x980))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(pz)*(x979)))+(((IkReal(0.600000000000000))*(pz)*(x980)))+(((IkReal(-1.00000000000000))*(x985)*(x990)))+(((IkReal(-1.00000000000000))*(x982)*(x989)))+(((IkReal(-1.00000000000000))*(pp)))+(((x985)*(x989)))+(((x982)*(x990))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x991=(cj3)*(cj3);
IkReal x992=(sj3)*(sj3);
IkReal x993=((cj3)*(sj3));
if( IKabs(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(-0.0950400000000000))*(sj3)))+(((IkReal(-0.0975704400000000))*(x993)))+(((px)*(pz)*(sj0)))+(((IkReal(0.000414000000000000))*(cj3)))+(((IkReal(-0.00941400000000000))*(x991)))+(((IkReal(0.00941400000000000))*(x992)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0188280000000000))*(x993)))+(((IkReal(-0.0984704400000000))*(x991)))+(((IkReal(-0.000900000000000000))*(x992)))+(((IkReal(0.0180000000000000))*(sj3)))+(((IkReal(-0.188280000000000))*(cj3)))+((pz)*(pz)))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(-0.0950400000000000))*(sj3)))+(((IkReal(-0.0975704400000000))*(x993)))+(((px)*(pz)*(sj0)))+(((IkReal(0.000414000000000000))*(cj3)))+(((IkReal(-0.00941400000000000))*(x991)))+(((IkReal(0.00941400000000000))*(x992)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(pz)))))), ((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0188280000000000))*(x993)))+(((IkReal(-0.0984704400000000))*(x991)))+(((IkReal(-0.000900000000000000))*(x992)))+(((IkReal(0.0180000000000000))*(sj3)))+(((IkReal(-0.188280000000000))*(cj3)))+((pz)*(pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x994=IKcos(j1);
IkReal x995=IKsin(j1);
IkReal x996=((IkReal(0.313800000000000))*(sj3));
IkReal x997=((px)*(sj0));
IkReal x998=((IkReal(0.0300000000000000))*(sj3));
IkReal x999=((IkReal(1.00000000000000))*(pz));
IkReal x1000=((cj0)*(py));
IkReal x1001=((IkReal(0.0300000000000000))*(cj3));
IkReal x1002=((IkReal(0.313800000000000))*(cj3));
IkReal x1003=((cj3)*(x994));
IkReal x1004=((IkReal(0.600000000000000))*(x994));
IkReal x1005=((IkReal(0.0600000000000000))*(x995));
evalcond[0]=((IkReal(0.300000000000000))+(((x994)*(x997)))+(x1002)+(((IkReal(-1.00000000000000))*(x995)*(x999)))+(((IkReal(-1.00000000000000))*(x998)))+(((IkReal(-1.00000000000000))*(x1000)*(x994))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x994)*(x996)))+(((IkReal(-1.00000000000000))*(x995)*(x998)))+(((IkReal(0.0300000000000000))*(x994)))+(((IkReal(-1.00000000000000))*(x999)))+(((IkReal(-1.00000000000000))*(x1001)*(x994)))+(((x1002)*(x995)))+(((IkReal(0.300000000000000))*(x995))));
evalcond[2]=((IkReal(0.0300000000000000))+(((x1000)*(x995)))+(((IkReal(-1.00000000000000))*(x994)*(x999)))+(((IkReal(-1.00000000000000))*(x1001)))+(((IkReal(-1.00000000000000))*(x996)))+(((IkReal(-1.00000000000000))*(x995)*(x997))));
evalcond[3]=((((IkReal(-0.0300000000000000))*(x995)))+(((IkReal(-1.00000000000000))*(x1000)))+(((IkReal(-1.00000000000000))*(x994)*(x998)))+(((x1001)*(x995)))+(((x1002)*(x994)))+(((x995)*(x996)))+(((IkReal(0.300000000000000))*(x994)))+(x997));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)*(x995)))+(((IkReal(0.0600000000000000))*(pz)*(x994)))+(((x1000)*(x1004)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x1004)*(x997)))+(((IkReal(-1.00000000000000))*(x1000)*(x1005)))+(((x1005)*(x997))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1006=((((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj3)))+(((IkReal(0.186480000000000))*(cj3))));
evalcond[2]=x1006;
evalcond[3]=x1006;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
IkReal x1007=((cj0)*(py));
IkReal x1008=((IkReal(0.313800000000000))*(sj3));
IkReal x1009=((IkReal(0.0300000000000000))*(px)*(sj0));
gconst51=IKsign(((((IkReal(-0.313800000000000))*(cj3)*(pz)))+(((px)*(sj0)*(x1008)))+(((cj3)*(x1009)))+(((IkReal(-0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1009)))+(((IkReal(0.0300000000000000))*(x1007)))+(((IkReal(-0.0300000000000000))*(cj3)*(x1007)))+(((IkReal(-1.00000000000000))*(x1007)*(x1008)))+(((IkReal(0.0300000000000000))*(pz)*(sj3)))));
IkReal x1010=((cj0)*(py));
IkReal x1011=((px)*(sj0));
IkReal x1012=((IkReal(10.4600000000000))*(sj3));
dummyeval[0]=((((IkReal(-10.4600000000000))*(cj3)*(pz)))+(((IkReal(-1.00000000000000))*(x1010)*(x1012)))+(x1010)+(((cj3)*(x1011)))+(((IkReal(-1.00000000000000))*(cj3)*(x1010)))+(((IkReal(-10.0000000000000))*(pz)))+(((pz)*(sj3)))+(((x1011)*(x1012)))+(((IkReal(-1.00000000000000))*(x1011))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign((((((px)*(px))*((sj0)*(sj0))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+((((cj0)*(cj0))*((py)*(py))))));
dummyeval[0]=(((((px)*(px))*((sj0)*(sj0))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+((((cj0)*(cj0))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1013=x1006;
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x1013;
evalcond[3]=x1013;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1014=((cj0)*(py));
IkReal x1015=((px)*(sj0));
dummyeval[0]=((((IkReal(-1.00000000000000))*((x1014)*(x1014))))+(((IkReal(-1.00000000000000))*((x1015)*(x1015))))+(((IkReal(2.00000000000000))*(x1014)*(x1015))));
dummyeval[1]=((x1015)+(((IkReal(-1.00000000000000))*(x1014))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x1016=((IkReal(1.00000000000000))*(pp));
IkReal x1017=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1016))));
evalcond[2]=x1017;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x1017;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1016))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1018=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1018))));
evalcond[2]=py;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1018))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1019=((IkReal(1.00000000000000))*(pp));
IkReal x1020=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(py)));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1019))));
evalcond[2]=x1020;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x1020;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1019))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1021=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1021))));
evalcond[2]=px;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1021))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1022=((IkReal(5000.00000000000))*(pp));
IkReal x1023=((px)*(sj0));
IkReal x1024=((cj0)*(py));
if( IKabs(((((IKabs(((((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(600.000000000000))*(x1023)*(x1024)))+(((IkReal(-300.000000000000))*((x1023)*(x1023)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(600.000000000000))*(x1023)*(x1024)))+(((IkReal(-300.000000000000))*((x1023)*(x1023))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x1022)*(x1024)))+(((x1022)*(x1023)))+(((IkReal(1883.75220000000))*(x1024)))+(((IkReal(-1883.75220000000))*(x1023))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x1024)))+(((IkReal(5000.00000000000))*(x1023))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x1024)))+(((IkReal(5000.00000000000))*(x1023)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(600.000000000000))*(x1023)*(x1024)))+(((IkReal(-300.000000000000))*((x1023)*(x1023)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(600.000000000000))*(x1023)*(x1024)))+(((IkReal(-300.000000000000))*((x1023)*(x1023))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x1022)*(x1024)))+(((x1022)*(x1023)))+(((IkReal(1883.75220000000))*(x1024)))+(((IkReal(-1883.75220000000))*(x1023)))))))+IKsqr(((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x1024)))+(((IkReal(5000.00000000000))*(x1023))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x1024)))+(((IkReal(5000.00000000000))*(x1023)))))):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(600.000000000000))*(x1023)*(x1024)))+(((IkReal(-300.000000000000))*((x1023)*(x1023)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(600.000000000000))*(x1023)*(x1024)))+(((IkReal(-300.000000000000))*((x1023)*(x1023))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x1022)*(x1024)))+(((x1022)*(x1023)))+(((IkReal(1883.75220000000))*(x1024)))+(((IkReal(-1883.75220000000))*(x1023)))))), ((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x1024)))+(((IkReal(5000.00000000000))*(x1023))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x1024)))+(((IkReal(5000.00000000000))*(x1023)))))):(IkReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1025=IKcos(j1);
IkReal x1026=IKsin(j1);
IkReal x1027=((cj0)*(py));
IkReal x1028=((px)*(sj0));
IkReal x1029=((IkReal(0.600000000000000))*(x1025));
IkReal x1030=((IkReal(0.0600000000000000))*(x1026));
evalcond[0]=((IkReal(0.613800000000000))+(((x1025)*(x1028)))+(((IkReal(-1.00000000000000))*(x1025)*(x1027))));
evalcond[1]=((IkReal(0.613800000000000))*(x1026));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1026)*(x1027)))+(((x1026)*(x1028))));
evalcond[3]=((x1028)+(((IkReal(-1.00000000000000))*(x1027)))+(((IkReal(0.613800000000000))*(x1025))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1028)*(x1029)))+(((IkReal(-1.00000000000000))*(x1028)*(x1030)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1027)*(x1030)))+(((x1027)*(x1029))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1031=((cj0)*(py));
IkReal x1032=((px)*(sj0));
if( IKabs(((((IKabs(((((IkReal(-184.140000000000))*(x1032)))+(((IkReal(184.140000000000))*(x1031))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x1032)))+(((IkReal(184.140000000000))*(x1031)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x1032)*(x1032))))+(((IkReal(-3000.00000000000))*((x1031)*(x1031))))+(((IkReal(3069.00000000000))*(pp)))+(((IkReal(6000.00000000000))*(x1031)*(x1032))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.62919517758227))*(x1031)))+(((IkReal(-1.62919517758227))*(x1032))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-184.140000000000))*(x1032)))+(((IkReal(184.140000000000))*(x1031))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x1032)))+(((IkReal(184.140000000000))*(x1031)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x1032)*(x1032))))+(((IkReal(-3000.00000000000))*((x1031)*(x1031))))+(((IkReal(3069.00000000000))*(pp)))+(((IkReal(6000.00000000000))*(x1031)*(x1032)))))))+IKsqr(((((IkReal(1.62919517758227))*(x1031)))+(((IkReal(-1.62919517758227))*(x1032)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((IkReal(-184.140000000000))*(x1032)))+(((IkReal(184.140000000000))*(x1031))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x1032)))+(((IkReal(184.140000000000))*(x1031)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x1032)*(x1032))))+(((IkReal(-3000.00000000000))*((x1031)*(x1031))))+(((IkReal(3069.00000000000))*(pp)))+(((IkReal(6000.00000000000))*(x1031)*(x1032)))))), ((((IkReal(1.62919517758227))*(x1031)))+(((IkReal(-1.62919517758227))*(x1032)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1033=IKcos(j1);
IkReal x1034=IKsin(j1);
IkReal x1035=((cj0)*(py));
IkReal x1036=((px)*(sj0));
IkReal x1037=((IkReal(0.600000000000000))*(x1033));
IkReal x1038=((IkReal(0.0600000000000000))*(x1034));
evalcond[0]=((IkReal(0.613800000000000))+(((IkReal(-1.00000000000000))*(x1033)*(x1035)))+(((x1033)*(x1036))));
evalcond[1]=((IkReal(0.613800000000000))*(x1034));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1034)*(x1035)))+(((x1034)*(x1036))));
evalcond[3]=((x1036)+(((IkReal(-1.00000000000000))*(x1035)))+(((IkReal(0.613800000000000))*(x1033))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1036)*(x1038)))+(((IkReal(-1.00000000000000))*(x1036)*(x1037)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1035)*(x1038)))+(((x1035)*(x1037))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1039=((cj0)*(py));
IkReal x1040=((IkReal(0.0300000000000000))*(sj3));
IkReal x1041=((IkReal(0.313800000000000))*(cj3));
IkReal x1042=((IkReal(0.313800000000000))*(sj3));
IkReal x1043=((IkReal(0.0300000000000000))*(pz));
IkReal x1044=((px)*(sj0));
IkReal x1045=((IkReal(0.0300000000000000))*(x1044));
if( IKabs(((gconst50)*(((((x1042)*(x1044)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1039)*(x1042)))+(((IkReal(0.0300000000000000))*(x1039)))+(((pz)*(x1041)))+(((cj3)*(x1045)))+(((IkReal(-0.0300000000000000))*(cj3)*(x1039)))+(((IkReal(-1.00000000000000))*(pz)*(x1040)))+(((IkReal(-1.00000000000000))*(x1045))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((IkReal(-0.300000000000000))*(x1044)))+(((x1040)*(x1044)))+(((x1039)*(x1041)))+(((IkReal(0.300000000000000))*(x1039)))+(((IkReal(-1.00000000000000))*(x1039)*(x1040)))+(((IkReal(-1.00000000000000))*(x1041)*(x1044)))+(((pz)*(x1042)))+(((cj3)*(x1043)))+(((IkReal(-1.00000000000000))*(x1043))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst50)*(((((x1042)*(x1044)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1039)*(x1042)))+(((IkReal(0.0300000000000000))*(x1039)))+(((pz)*(x1041)))+(((cj3)*(x1045)))+(((IkReal(-0.0300000000000000))*(cj3)*(x1039)))+(((IkReal(-1.00000000000000))*(pz)*(x1040)))+(((IkReal(-1.00000000000000))*(x1045)))))), ((gconst50)*(((((IkReal(-0.300000000000000))*(x1044)))+(((x1040)*(x1044)))+(((x1039)*(x1041)))+(((IkReal(0.300000000000000))*(x1039)))+(((IkReal(-1.00000000000000))*(x1039)*(x1040)))+(((IkReal(-1.00000000000000))*(x1041)*(x1044)))+(((pz)*(x1042)))+(((cj3)*(x1043)))+(((IkReal(-1.00000000000000))*(x1043)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1046=IKcos(j1);
IkReal x1047=IKsin(j1);
IkReal x1048=((px)*(sj0));
IkReal x1049=((IkReal(0.313800000000000))*(sj3));
IkReal x1050=((IkReal(0.0300000000000000))*(sj3));
IkReal x1051=((IkReal(1.00000000000000))*(pz));
IkReal x1052=((IkReal(0.313800000000000))*(cj3));
IkReal x1053=((IkReal(0.0300000000000000))*(cj3));
IkReal x1054=((IkReal(0.0300000000000000))*(x1046));
IkReal x1055=((IkReal(0.313800000000000))*(x1047));
IkReal x1056=((pz)*(x1046));
IkReal x1057=((IkReal(1.00000000000000))*(cj0)*(py));
IkReal x1058=((IkReal(0.0600000000000000))*(x1047));
IkReal x1059=((cj0)*(py)*(x1046));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x1050)))+(((IkReal(-1.00000000000000))*(x1046)*(x1057)))+(x1052)+(((x1046)*(x1048)))+(((IkReal(-1.00000000000000))*(x1047)*(x1051))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1054)))+(((IkReal(-1.00000000000000))*(x1051)))+(((IkReal(0.300000000000000))*(x1047)))+(((x1047)*(x1052)))+(((x1046)*(x1053)))+(((x1046)*(x1049)))+(((IkReal(-1.00000000000000))*(x1047)*(x1050))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1053)))+(x1056)+(((x1047)*(x1048)))+(((IkReal(-1.00000000000000))*(x1049)))+(((IkReal(-1.00000000000000))*(x1047)*(x1057))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1057)))+(((IkReal(-1.00000000000000))*(x1046)*(x1050)))+(x1048)+(((IkReal(0.300000000000000))*(x1046)))+(((IkReal(0.0300000000000000))*(x1047)))+(((x1046)*(x1052)))+(((IkReal(-1.00000000000000))*(x1047)*(x1049)))+(((IkReal(-1.00000000000000))*(x1047)*(x1053))));
evalcond[4]=((IkReal(0.00847044000000000))+(((cj0)*(py)*(x1058)))+(((IkReal(0.600000000000000))*(pz)*(x1047)))+(((IkReal(-0.600000000000000))*(x1046)*(x1048)))+(((IkReal(-0.0600000000000000))*(x1056)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x1059)))+(((IkReal(-1.00000000000000))*(x1048)*(x1058))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1060=(sj3)*(sj3);
IkReal x1061=(cj3)*(cj3);
IkReal x1062=((cj3)*(sj3));
if( IKabs(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(-0.00180000000000000))*(cj3)))+(((IkReal(0.0188280000000000))*(x1062)))+(((IkReal(0.0984704400000000))*(x1060)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-0.0188280000000000))*(sj3)))+(((IkReal(0.000900000000000000))*(x1061))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(-0.0975704400000000))*(x1062)))+(((IkReal(-0.0950400000000000))*(sj3)))+(((IkReal(-0.00941400000000000))*(x1061)))+(((px)*(pz)*(sj0)))+(((IkReal(0.000414000000000000))*(cj3)))+(((IkReal(0.00941400000000000))*(x1060)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(-0.00180000000000000))*(cj3)))+(((IkReal(0.0188280000000000))*(x1062)))+(((IkReal(0.0984704400000000))*(x1060)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-0.0188280000000000))*(sj3)))+(((IkReal(0.000900000000000000))*(x1061)))))), ((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(-0.0975704400000000))*(x1062)))+(((IkReal(-0.0950400000000000))*(sj3)))+(((IkReal(-0.00941400000000000))*(x1061)))+(((px)*(pz)*(sj0)))+(((IkReal(0.000414000000000000))*(cj3)))+(((IkReal(0.00941400000000000))*(x1060)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(pz)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1063=IKcos(j1);
IkReal x1064=IKsin(j1);
IkReal x1065=((px)*(sj0));
IkReal x1066=((IkReal(0.313800000000000))*(sj3));
IkReal x1067=((IkReal(0.0300000000000000))*(sj3));
IkReal x1068=((IkReal(1.00000000000000))*(pz));
IkReal x1069=((IkReal(0.313800000000000))*(cj3));
IkReal x1070=((IkReal(0.0300000000000000))*(cj3));
IkReal x1071=((IkReal(0.0300000000000000))*(x1063));
IkReal x1072=((IkReal(0.313800000000000))*(x1064));
IkReal x1073=((pz)*(x1063));
IkReal x1074=((IkReal(1.00000000000000))*(cj0)*(py));
IkReal x1075=((IkReal(0.0600000000000000))*(x1064));
IkReal x1076=((cj0)*(py)*(x1063));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x1063)*(x1074)))+(x1069)+(((x1063)*(x1065)))+(((IkReal(-1.00000000000000))*(x1067)))+(((IkReal(-1.00000000000000))*(x1064)*(x1068))));
evalcond[1]=((((IkReal(0.300000000000000))*(x1064)))+(((x1063)*(x1070)))+(((x1063)*(x1066)))+(((IkReal(-1.00000000000000))*(x1068)))+(((IkReal(-1.00000000000000))*(x1064)*(x1067)))+(((IkReal(-1.00000000000000))*(x1071)))+(((x1064)*(x1069))));
evalcond[2]=((IkReal(0.0300000000000000))+(x1073)+(((IkReal(-1.00000000000000))*(x1066)))+(((IkReal(-1.00000000000000))*(x1070)))+(((IkReal(-1.00000000000000))*(x1064)*(x1074)))+(((x1064)*(x1065))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1063)*(x1067)))+(((IkReal(0.300000000000000))*(x1063)))+(((IkReal(0.0300000000000000))*(x1064)))+(x1065)+(((x1063)*(x1069)))+(((IkReal(-1.00000000000000))*(x1064)*(x1066)))+(((IkReal(-1.00000000000000))*(x1074)))+(((IkReal(-1.00000000000000))*(x1064)*(x1070))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)*(x1064)))+(((IkReal(-0.0600000000000000))*(x1073)))+(((IkReal(0.600000000000000))*(x1076)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x1065)*(x1075)))+(((cj0)*(py)*(x1075)))+(((IkReal(-0.600000000000000))*(x1063)*(x1065))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1077=((IkReal(0.0300000000000000))*(sj3));
IkReal x1078=((cj0)*(sj2));
IkReal x1079=((IkReal(0.313800000000000))*(cj3));
IkReal x1080=((py)*(sj2));
IkReal x1081=((cj2)*(pz));
IkReal x1082=((cj0)*(cj2)*(py));
IkReal x1083=((cj2)*(px)*(sj0));
if( IKabs(((gconst46)*(((((x1079)*(x1081)))+(((IkReal(-1.00000000000000))*(sj0)*(x1078)*((py)*(py))))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(py)*(x1078)))+(((IkReal(-1.00000000000000))*(x1077)*(x1081)))+(((sj0)*(x1078)*((px)*(px))))+(((px)*(x1080)*((sj0)*(sj0))))+(((IkReal(0.300000000000000))*(x1081))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((x1079)*(x1082)))+(((IkReal(-0.300000000000000))*(x1083)))+(((pz)*(sj0)*(x1080)))+(((px)*(pz)*(x1078)))+(((IkReal(-1.00000000000000))*(x1079)*(x1083)))+(((x1077)*(x1083)))+(((IkReal(-1.00000000000000))*(x1077)*(x1082)))+(((IkReal(0.300000000000000))*(x1082))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst46)*(((((x1079)*(x1081)))+(((IkReal(-1.00000000000000))*(sj0)*(x1078)*((py)*(py))))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(py)*(x1078)))+(((IkReal(-1.00000000000000))*(x1077)*(x1081)))+(((sj0)*(x1078)*((px)*(px))))+(((px)*(x1080)*((sj0)*(sj0))))+(((IkReal(0.300000000000000))*(x1081)))))), ((gconst46)*(((((x1079)*(x1082)))+(((IkReal(-0.300000000000000))*(x1083)))+(((pz)*(sj0)*(x1080)))+(((px)*(pz)*(x1078)))+(((IkReal(-1.00000000000000))*(x1079)*(x1083)))+(((x1077)*(x1083)))+(((IkReal(-1.00000000000000))*(x1077)*(x1082)))+(((IkReal(0.300000000000000))*(x1082)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1084=IKcos(j1);
IkReal x1085=IKsin(j1);
IkReal x1086=((cj0)*(sj2));
IkReal x1087=((IkReal(0.0300000000000000))*(sj3));
IkReal x1088=((IkReal(0.313800000000000))*(cj3));
IkReal x1089=((IkReal(0.313800000000000))*(sj3));
IkReal x1090=((px)*(sj0));
IkReal x1091=((IkReal(1.00000000000000))*(cj2));
IkReal x1092=((cj0)*(px));
IkReal x1093=((IkReal(1.00000000000000))*(pz));
IkReal x1094=((IkReal(0.0300000000000000))*(cj3));
IkReal x1095=((cj2)*(py)*(sj0));
IkReal x1096=((py)*(x1085));
IkReal x1097=((sj2)*(x1085));
IkReal x1098=((sj2)*(x1084));
IkReal x1099=((IkReal(1.00000000000000))*(cj0)*(py));
IkReal x1100=((IkReal(0.600000000000000))*(x1084));
evalcond[0]=((IkReal(0.300000000000000))+(x1088)+(((x1084)*(x1090)))+(((IkReal(-1.00000000000000))*(x1084)*(x1099)))+(((IkReal(-1.00000000000000))*(x1085)*(x1093)))+(((IkReal(-1.00000000000000))*(x1087))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1085)*(x1090)*(x1091)))+(((IkReal(-1.00000000000000))*(pz)*(x1084)*(x1091)))+(((px)*(x1086)))+(((py)*(sj0)*(sj2)))+(((cj0)*(cj2)*(x1096))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1093)))+(((IkReal(-1.00000000000000))*(x1089)*(x1098)))+(((IkReal(-1.00000000000000))*(x1094)*(x1098)))+(((IkReal(-1.00000000000000))*(x1085)*(x1087)))+(((IkReal(0.0300000000000000))*(x1098)))+(((x1085)*(x1088)))+(((IkReal(0.300000000000000))*(x1085))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1091)*(x1092)))+(((IkReal(-1.00000000000000))*(x1090)*(x1097)))+(((x1086)*(x1096)))+(((IkReal(-1.00000000000000))*(x1094)))+(((IkReal(-1.00000000000000))*(x1093)*(x1098)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x1091)))+(((IkReal(-1.00000000000000))*(x1089))));
evalcond[4]=((x1090)+(((x1089)*(x1097)))+(((IkReal(-1.00000000000000))*(x1099)))+(((x1094)*(x1097)))+(((IkReal(-0.0300000000000000))*(x1097)))+(((IkReal(-1.00000000000000))*(x1084)*(x1087)))+(((x1084)*(x1088)))+(((IkReal(0.300000000000000))*(x1084))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1090)*(x1100)))+(((IkReal(0.0600000000000000))*(cj2)*(x1092)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x1086)*(x1096)))+(((IkReal(0.0600000000000000))*(pz)*(x1098)))+(((IkReal(0.0600000000000000))*(x1090)*(x1097)))+(((IkReal(0.600000000000000))*(pz)*(x1085)))+(((IkReal(0.0600000000000000))*(x1095)))+(((cj0)*(py)*(x1100))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1101=(cj3)*(cj3);
IkReal x1102=(sj3)*(sj3);
IkReal x1103=((sj2)*(sj3));
IkReal x1104=((IkReal(0.00941400000000000))*(sj2));
if( IKabs(((gconst47)*(((((x1102)*(x1104)))+(((IkReal(0.000414000000000000))*(cj3)*(sj2)))+(((px)*(pz)*(sj0)))+(((IkReal(-0.0950400000000000))*(x1103)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(pz)))+(((IkReal(-0.0975704400000000))*(cj3)*(x1103)))+(((IkReal(-1.00000000000000))*(x1101)*(x1104)))+(((IkReal(0.00900000000000000))*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0188280000000000))*(cj3)*(sj3)))+(((IkReal(0.0180000000000000))*(sj3)))+(((IkReal(-0.188280000000000))*(cj3)))+((pz)*(pz))+(((IkReal(-0.000900000000000000))*(x1102)))+(((IkReal(-0.0984704400000000))*(x1101))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst47)*(((((x1102)*(x1104)))+(((IkReal(0.000414000000000000))*(cj3)*(sj2)))+(((px)*(pz)*(sj0)))+(((IkReal(-0.0950400000000000))*(x1103)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(pz)))+(((IkReal(-0.0975704400000000))*(cj3)*(x1103)))+(((IkReal(-1.00000000000000))*(x1101)*(x1104)))+(((IkReal(0.00900000000000000))*(sj2)))))), ((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0188280000000000))*(cj3)*(sj3)))+(((IkReal(0.0180000000000000))*(sj3)))+(((IkReal(-0.188280000000000))*(cj3)))+((pz)*(pz))+(((IkReal(-0.000900000000000000))*(x1102)))+(((IkReal(-0.0984704400000000))*(x1101)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1105=IKcos(j1);
IkReal x1106=IKsin(j1);
IkReal x1107=((cj0)*(sj2));
IkReal x1108=((IkReal(0.0300000000000000))*(sj3));
IkReal x1109=((IkReal(0.313800000000000))*(cj3));
IkReal x1110=((IkReal(0.313800000000000))*(sj3));
IkReal x1111=((px)*(sj0));
IkReal x1112=((IkReal(1.00000000000000))*(cj2));
IkReal x1113=((cj0)*(px));
IkReal x1114=((IkReal(1.00000000000000))*(pz));
IkReal x1115=((IkReal(0.0300000000000000))*(cj3));
IkReal x1116=((cj2)*(py)*(sj0));
IkReal x1117=((py)*(x1106));
IkReal x1118=((sj2)*(x1106));
IkReal x1119=((sj2)*(x1105));
IkReal x1120=((IkReal(1.00000000000000))*(cj0)*(py));
IkReal x1121=((IkReal(0.600000000000000))*(x1105));
evalcond[0]=((IkReal(0.300000000000000))+(x1109)+(((x1105)*(x1111)))+(((IkReal(-1.00000000000000))*(x1105)*(x1120)))+(((IkReal(-1.00000000000000))*(x1106)*(x1114)))+(((IkReal(-1.00000000000000))*(x1108))));
evalcond[1]=((((cj0)*(cj2)*(x1117)))+(((IkReal(-1.00000000000000))*(pz)*(x1105)*(x1112)))+(((IkReal(-1.00000000000000))*(x1106)*(x1111)*(x1112)))+(((px)*(x1107)))+(((py)*(sj0)*(sj2))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1106)*(x1108)))+(((IkReal(-1.00000000000000))*(x1110)*(x1119)))+(((IkReal(-1.00000000000000))*(x1114)))+(((x1106)*(x1109)))+(((IkReal(-1.00000000000000))*(x1115)*(x1119)))+(((IkReal(0.0300000000000000))*(x1119)))+(((IkReal(0.300000000000000))*(x1106))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1114)*(x1119)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x1112)))+(((IkReal(-1.00000000000000))*(x1112)*(x1113)))+(((IkReal(-1.00000000000000))*(x1111)*(x1118)))+(((IkReal(-1.00000000000000))*(x1115)))+(((IkReal(-1.00000000000000))*(x1110)))+(((x1107)*(x1117))));
evalcond[4]=((x1111)+(((x1105)*(x1109)))+(((x1110)*(x1118)))+(((IkReal(-0.0300000000000000))*(x1118)))+(((IkReal(-1.00000000000000))*(x1120)))+(((x1115)*(x1118)))+(((IkReal(-1.00000000000000))*(x1105)*(x1108)))+(((IkReal(0.300000000000000))*(x1105))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x1116)))+(((IkReal(-0.0600000000000000))*(x1107)*(x1117)))+(((IkReal(0.0600000000000000))*(cj2)*(x1113)))+(((IkReal(0.0600000000000000))*(x1111)*(x1118)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x1111)*(x1121)))+(((IkReal(0.0600000000000000))*(pz)*(x1119)))+(((cj0)*(py)*(x1121)))+(((IkReal(0.600000000000000))*(pz)*(x1106))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x95=((cj2)*(sj0));
IkReal x96=((sj2)*(sj3));
IkReal x97=((IkReal(1.00000000000000))*(sj0));
IkReal x98=((cj0)*(cj2));
IkReal x99=((cj1)*(cj2));
IkReal x100=((IkReal(1.00000000000000))*(sj1));
IkReal x101=((cj1)*(cj3));
IkReal x102=((cj3)*(x98));
IkReal x103=((((cj1)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(sj2)*(x100))));
IkReal x104=((((sj2)*(x101)))+(((sj1)*(sj3))));
IkReal x105=((((sj1)*(x95)))+(((IkReal(-1.00000000000000))*(cj0)*(sj2))));
IkReal x106=((((IkReal(-1.00000000000000))*(cj3)*(x100)))+(((cj1)*(x96))));
IkReal x107=((((IkReal(-1.00000000000000))*(sj2)*(x97)))+(((IkReal(-1.00000000000000))*(x100)*(x98))));
IkReal x108=((((IkReal(-1.00000000000000))*(x100)*(x96)))+(((IkReal(-1.00000000000000))*(x101))));
IkReal x109=((((IkReal(-1.00000000000000))*(x103)*(x97)))+(x102));
IkReal x110=((((cj3)*(x95)))+(((cj0)*(x103))));
IkReal x111=((((sj3)*(x95)))+(((cj0)*(x108))));
IkReal x112=((((sj3)*(x98)))+(((IkReal(-1.00000000000000))*(x108)*(x97))));
new_r00=((((r10)*(x110)))+(((r20)*(x104)))+(((r00)*(x109))));
new_r01=((((r21)*(x104)))+(((r11)*(x110)))+(((r01)*(x109))));
new_r02=((((r22)*(x104)))+(((r02)*(((((IkReal(-1.00000000000000))*(sj0)*(x103)))+(x102)))))+(((r12)*(x110))));
new_r10=((((r10)*(x107)))+(((r20)*(x99)))+(((r00)*(x105))));
new_r11=((((r21)*(x99)))+(((r01)*(x105)))+(((r11)*(x107))));
new_r12=((((r02)*(x105)))+(((r12)*(x107)))+(((r22)*(x99))));
new_r20=((((r10)*(x111)))+(((r20)*(x106)))+(((r00)*(x112))));
new_r21=((((r21)*(x106)))+(((r11)*(x111)))+(((r01)*(x112))));
new_r22=((((r02)*(x112)))+(((r22)*(x106)))+(((r12)*(x111))));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(((((cj5)*((new_r02)*(new_r02))))+(((cj5)*((new_r12)*(new_r12))))));
dummyeval[0]=((((cj5)*((new_r02)*(new_r02))))+(((cj5)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((IKcos(j6))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst60;
gconst60=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst61)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst61)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst61)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst61)*(new_r10)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x113=IKcos(j4);
IkReal x114=IKsin(j4);
IkReal x115=((IkReal(1.00000000000000))*(x114));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x115)))+(((new_r12)*(x113))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x113)))+(((new_r12)*(x114))));
evalcond[2]=((((new_r10)*(x113)))+(((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x115))));
evalcond[3]=((((new_r11)*(x113)))+(((IkReal(-1.00000000000000))*(new_r01)*(x115)))+(((IkReal(-1.00000000000000))*(cj6))));
evalcond[4]=((((new_r11)*(x114)))+(((new_r01)*(x113))));
evalcond[5]=((((new_r10)*(x114)))+(((new_r00)*(x113))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst60)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst60)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst60)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst60)*(new_r11)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x116=IKcos(j4);
IkReal x117=IKsin(j4);
IkReal x118=((IkReal(1.00000000000000))*(x117));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x118)))+(((new_r12)*(x116))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x116)))+(((new_r12)*(x117))));
evalcond[2]=((((new_r10)*(x116)))+(((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x118))));
evalcond[3]=((((new_r11)*(x116)))+(((IkReal(-1.00000000000000))*(new_r01)*(x118)))+(((IkReal(-1.00000000000000))*(cj6))));
evalcond[4]=((((new_r11)*(x117)))+(((new_r01)*(x116))));
evalcond[5]=((((new_r10)*(x117)))+(((new_r00)*(x116))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(IKcos(j6))))+(new_r20));
evalcond[1]=((IKsin(j6))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst64;
gconst64=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst65;
gconst65=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst65)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst65)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst65)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst65)*(new_r10)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x119=IKcos(j4);
IkReal x120=IKsin(j4);
IkReal x121=((IkReal(1.00000000000000))*(x120));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x121)))+(((new_r12)*(x119))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x119)))+(((new_r12)*(x120))));
evalcond[2]=((((new_r10)*(x119)))+(((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x121))));
evalcond[3]=((((new_r11)*(x119)))+(((IkReal(-1.00000000000000))*(new_r01)*(x121)))+(((IkReal(-1.00000000000000))*(cj6))));
evalcond[4]=((((new_r01)*(x119)))+(((new_r11)*(x120))));
evalcond[5]=((((new_r00)*(x119)))+(((new_r10)*(x120))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst64)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst64)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst64)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst64)*(new_r11)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x122=IKcos(j4);
IkReal x123=IKsin(j4);
IkReal x124=((IkReal(1.00000000000000))*(x123));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x124)))+(((new_r12)*(x122))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x122)))+(((new_r12)*(x123))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x124)))+(((new_r10)*(x122))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x124)))+(((new_r11)*(x122)))+(((IkReal(-1.00000000000000))*(cj6))));
evalcond[4]=((((new_r01)*(x122)))+(((new_r11)*(x123))));
evalcond[5]=((((new_r00)*(x122)))+(((new_r10)*(x123))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x125=IKatan2(new_r02, new_r12);
j4array[0]=((IkReal(-1.00000000000000))*(x125));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x125))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x126=IKsin(j6);
IkReal x127=((IkReal(1.00000000000000))*(sj4));
IkReal x128=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x127)))+(((IkReal(-1.00000000000000))*(x126))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x127)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x128))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x126));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x128))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x129=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x129;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x129;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x130=IKatan2(new_r02, new_r12);
j4array[0]=((IkReal(-1.00000000000000))*(x130));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x130))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r01)))+(((new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x131=IKcos(j6);
IkReal x132=((IkReal(1.00000000000000))*(sj4));
IkReal x133=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x132)))+(((IkReal(-1.00000000000000))*(x133))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x132)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x131))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(((IkReal(-1.00000000000000))*(x133))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x131));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x134=((gconst53)*(new_r22)*(sj5));
if( IKabs(((new_r12)*(x134))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x134))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x134)), ((new_r02)*(x134)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x135=IKcos(j4);
IkReal x136=IKsin(j4);
IkReal x137=((IkReal(1.00000000000000))*(sj5));
IkReal x138=((IkReal(1.00000000000000))*(cj5));
IkReal x139=((new_r12)*(x136));
IkReal x140=((new_r02)*(x135));
evalcond[0]=((((new_r12)*(x135)))+(((IkReal(-1.00000000000000))*(new_r02)*(x136))));
evalcond[1]=((x140)+(x139)+(((IkReal(-1.00000000000000))*(x137))));
evalcond[2]=((((cj5)*(x140)))+(((IkReal(-1.00000000000000))*(new_r22)*(x137)))+(((cj5)*(x139))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x135)*(x137)))+(((IkReal(-1.00000000000000))*(new_r10)*(x136)*(x137)))+(((IkReal(-1.00000000000000))*(new_r20)*(x138))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r21)*(x138)))+(((IkReal(-1.00000000000000))*(new_r01)*(x135)*(x137)))+(((IkReal(-1.00000000000000))*(new_r11)*(x136)*(x137))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x137)*(x140)))+(((IkReal(-1.00000000000000))*(x137)*(x139)))+(((IkReal(-1.00000000000000))*(new_r22)*(x138))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x141=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
IkReal x142=((((new_r12)*(sj4)))+(((cj4)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x141;
evalcond[5]=x141;
evalcond[6]=x142;
evalcond[7]=x142;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x143=IKsin(j6);
IkReal x144=((IkReal(1.00000000000000))*(sj4));
IkReal x145=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x143)))+(((IkReal(-1.00000000000000))*(new_r00)*(x144))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x144)))+(((IkReal(-1.00000000000000))*(x145)))+(((cj4)*(new_r11))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x143));
evalcond[3]=((((IkReal(-1.00000000000000))*(x145)))+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x146=((IkReal(1.00000000000000))+(new_r22));
IkReal x147=((cj4)*(new_r02));
IkReal x148=((new_r12)*(sj4));
IkReal x149=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x146;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x149;
evalcond[5]=x149;
evalcond[6]=((x147)+(x148));
evalcond[7]=((((IkReal(-1.00000000000000))*(x147)))+(((IkReal(-1.00000000000000))*(x148))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x146;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r01)))+(((new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x150=IKcos(j6);
IkReal x151=((IkReal(1.00000000000000))*(sj4));
IkReal x152=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x152)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x151))));
evalcond[1]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x150)))+(((IkReal(-1.00000000000000))*(new_r01)*(x151))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x152)))+(((cj4)*(new_r01)))+(((new_r11)*(sj4))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x150));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x153=IKsin(j6);
IkReal x154=IKcos(j6);
IkReal x155=((cj4)*(new_r01));
IkReal x156=((IkReal(1.00000000000000))*(sj5));
IkReal x157=((new_r10)*(sj4));
IkReal x158=((new_r11)*(sj4));
IkReal x159=((cj4)*(new_r00));
IkReal x160=((IkReal(1.00000000000000))*(sj4));
IkReal x161=((IkReal(1.00000000000000))*(x154));
evalcond[0]=((((sj5)*(x154)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x153)*(x156)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x160)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x153))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x161)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x160))));
evalcond[4]=((x155)+(x158)+(((cj5)*(x153))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x161)))+(x157)+(x159));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x156)))+(x153)+(((cj5)*(x158)))+(((cj5)*(x155))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x156)))+(((IkReal(-1.00000000000000))*(x161)))+(((cj5)*(x159)))+(((cj5)*(x157))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x162=IKsin(j6);
IkReal x163=IKcos(j6);
IkReal x164=((cj4)*(new_r01));
IkReal x165=((IkReal(1.00000000000000))*(sj5));
IkReal x166=((new_r10)*(sj4));
IkReal x167=((new_r11)*(sj4));
IkReal x168=((cj4)*(new_r00));
IkReal x169=((IkReal(1.00000000000000))*(sj4));
IkReal x170=((IkReal(1.00000000000000))*(x163));
evalcond[0]=((new_r20)+(((sj5)*(x163))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x162)*(x165)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x169)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x162))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x170)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x169))));
evalcond[4]=((((cj5)*(x162)))+(x167)+(x164));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x170)))+(x168)+(x166));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x165)))+(((cj5)*(x167)))+(((cj5)*(x164)))+(x162));
evalcond[7]=((((cj5)*(x166)))+(((cj5)*(x168)))+(((IkReal(-1.00000000000000))*(x170)))+(((IkReal(-1.00000000000000))*(new_r20)*(x165))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst55)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst55)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst55)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst55)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x171=IKsin(j6);
IkReal x172=IKcos(j6);
IkReal x173=((cj4)*(new_r01));
IkReal x174=((IkReal(1.00000000000000))*(sj5));
IkReal x175=((new_r10)*(sj4));
IkReal x176=((new_r11)*(sj4));
IkReal x177=((cj4)*(new_r00));
IkReal x178=((IkReal(1.00000000000000))*(sj4));
IkReal x179=((IkReal(1.00000000000000))*(x172));
evalcond[0]=((new_r20)+(((sj5)*(x172))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x171)*(x174)))+(new_r21));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x171)))+(((IkReal(-1.00000000000000))*(new_r00)*(x178))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x179)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x178))));
evalcond[4]=((((cj5)*(x171)))+(x173)+(x176));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x179)))+(x175)+(x177));
evalcond[6]=((((cj5)*(x173)))+(((cj5)*(x176)))+(((IkReal(-1.00000000000000))*(new_r21)*(x174)))+(x171));
evalcond[7]=((((cj5)*(x175)))+(((cj5)*(x177)))+(((IkReal(-1.00000000000000))*(x179)))+(((IkReal(-1.00000000000000))*(new_r20)*(x174))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x180=((gconst52)*(sj5));
if( IKabs(((new_r12)*(x180))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x180))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x180)), ((new_r02)*(x180)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x181=IKcos(j4);
IkReal x182=IKsin(j4);
IkReal x183=((IkReal(1.00000000000000))*(sj5));
IkReal x184=((IkReal(1.00000000000000))*(cj5));
IkReal x185=((new_r12)*(x182));
IkReal x186=((new_r02)*(x181));
evalcond[0]=((((new_r12)*(x181)))+(((IkReal(-1.00000000000000))*(new_r02)*(x182))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x183)))+(x185)+(x186));
evalcond[2]=((((cj5)*(x185)))+(((cj5)*(x186)))+(((IkReal(-1.00000000000000))*(new_r22)*(x183))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r10)*(x182)*(x183)))+(((IkReal(-1.00000000000000))*(new_r00)*(x181)*(x183)))+(((IkReal(-1.00000000000000))*(new_r20)*(x184))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r11)*(x182)*(x183)))+(((IkReal(-1.00000000000000))*(new_r21)*(x184)))+(((IkReal(-1.00000000000000))*(new_r01)*(x181)*(x183))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x184)))+(((IkReal(-1.00000000000000))*(x183)*(x185)))+(((IkReal(-1.00000000000000))*(x183)*(x186))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x187=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
IkReal x188=((((new_r12)*(sj4)))+(((cj4)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x187;
evalcond[5]=x187;
evalcond[6]=x188;
evalcond[7]=x188;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x189=IKsin(j6);
IkReal x190=((IkReal(1.00000000000000))*(sj4));
IkReal x191=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x189)))+(((IkReal(-1.00000000000000))*(new_r00)*(x190))));
evalcond[1]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x191)))+(((IkReal(-1.00000000000000))*(new_r01)*(x190))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x189));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x191))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x192=((IkReal(1.00000000000000))+(new_r22));
IkReal x193=((cj4)*(new_r02));
IkReal x194=((new_r12)*(sj4));
IkReal x195=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x192;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x195;
evalcond[5]=x195;
evalcond[6]=((x193)+(x194));
evalcond[7]=((((IkReal(-1.00000000000000))*(x194)))+(((IkReal(-1.00000000000000))*(x193))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x192;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r01)))+(((new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x196=IKcos(j6);
IkReal x197=((IkReal(1.00000000000000))*(sj4));
IkReal x198=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x198)))+(((IkReal(-1.00000000000000))*(new_r00)*(x197))));
evalcond[1]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x196)))+(((IkReal(-1.00000000000000))*(new_r01)*(x197))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(((IkReal(-1.00000000000000))*(x198))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x196));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x199=IKsin(j6);
IkReal x200=IKcos(j6);
IkReal x201=((cj4)*(new_r01));
IkReal x202=((IkReal(1.00000000000000))*(sj5));
IkReal x203=((new_r10)*(sj4));
IkReal x204=((new_r11)*(sj4));
IkReal x205=((cj4)*(new_r00));
IkReal x206=((IkReal(1.00000000000000))*(sj4));
IkReal x207=((IkReal(1.00000000000000))*(x200));
evalcond[0]=((new_r20)+(((sj5)*(x200))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x199)*(x202)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x206)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x199))));
evalcond[3]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x207)))+(((IkReal(-1.00000000000000))*(new_r01)*(x206))));
evalcond[4]=((((cj5)*(x199)))+(x204)+(x201));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x207)))+(x205)+(x203));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x202)))+(x199)+(((cj5)*(x204)))+(((cj5)*(x201))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x202)))+(((IkReal(-1.00000000000000))*(x207)))+(((cj5)*(x203)))+(((cj5)*(x205))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x208=IKsin(j6);
IkReal x209=IKcos(j6);
IkReal x210=((cj4)*(new_r01));
IkReal x211=((IkReal(1.00000000000000))*(sj5));
IkReal x212=((new_r10)*(sj4));
IkReal x213=((new_r11)*(sj4));
IkReal x214=((cj4)*(new_r00));
IkReal x215=((IkReal(1.00000000000000))*(sj4));
IkReal x216=((IkReal(1.00000000000000))*(x209));
evalcond[0]=((new_r20)+(((sj5)*(x209))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x208)*(x211))));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x215)))+(((IkReal(-1.00000000000000))*(x208))));
evalcond[3]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x215)))+(((IkReal(-1.00000000000000))*(x216))));
evalcond[4]=((x210)+(x213)+(((cj5)*(x208))));
evalcond[5]=((x212)+(x214)+(((IkReal(-1.00000000000000))*(cj5)*(x216))));
evalcond[6]=((((cj5)*(x213)))+(((cj5)*(x210)))+(x208)+(((IkReal(-1.00000000000000))*(new_r21)*(x211))));
evalcond[7]=((((cj5)*(x214)))+(((cj5)*(x212)))+(((IkReal(-1.00000000000000))*(new_r20)*(x211)))+(((IkReal(-1.00000000000000))*(x216))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst55)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst55)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst55)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst55)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x217=IKsin(j6);
IkReal x218=IKcos(j6);
IkReal x219=((cj4)*(new_r01));
IkReal x220=((IkReal(1.00000000000000))*(sj5));
IkReal x221=((new_r10)*(sj4));
IkReal x222=((new_r11)*(sj4));
IkReal x223=((cj4)*(new_r00));
IkReal x224=((IkReal(1.00000000000000))*(sj4));
IkReal x225=((IkReal(1.00000000000000))*(x218));
evalcond[0]=((((sj5)*(x218)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x217)*(x220)))+(new_r21));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x217)))+(((IkReal(-1.00000000000000))*(new_r00)*(x224))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x224)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x225))));
evalcond[4]=((((cj5)*(x217)))+(x219)+(x222));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x225)))+(x221)+(x223));
evalcond[6]=((((cj5)*(x219)))+(x217)+(((cj5)*(x222)))+(((IkReal(-1.00000000000000))*(new_r21)*(x220))));
evalcond[7]=((((cj5)*(x221)))+(((cj5)*(x223)))+(((IkReal(-1.00000000000000))*(new_r20)*(x220)))+(((IkReal(-1.00000000000000))*(x225))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst54)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst54)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst54)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst54)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((sj5)*(IKcos(j6)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj5)*(IKsin(j6))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst56;
gconst56=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst57;
gconst57=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x226=((gconst57)*(sj6));
if( IKabs(((new_r12)*(x226))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x226))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x226)), ((new_r02)*(x226)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x227=IKcos(j4);
IkReal x228=IKsin(j4);
IkReal x229=((IkReal(1.00000000000000))*(cj6));
IkReal x230=((IkReal(1.00000000000000))*(sj5));
IkReal x231=((IkReal(1.00000000000000))*(cj5));
IkReal x232=((new_r00)*(x227));
IkReal x233=((cj5)*(x228));
IkReal x234=((new_r11)*(x228));
IkReal x235=((cj5)*(x227));
IkReal x236=((new_r02)*(x227));
IkReal x237=((new_r12)*(x228));
IkReal x238=((new_r10)*(x228));
IkReal x239=((IkReal(1.00000000000000))*(x228));
IkReal x240=((new_r01)*(x227));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x239)))+(((new_r12)*(x227))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x230)))+(x236)+(x237));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((new_r10)*(x227)))+(((IkReal(-1.00000000000000))*(new_r00)*(x239))));
evalcond[3]=((((new_r11)*(x227)))+(((IkReal(-1.00000000000000))*(new_r01)*(x239)))+(((IkReal(-1.00000000000000))*(x229))));
evalcond[4]=((((cj5)*(sj6)))+(x234)+(x240));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x229)))+(x238)+(x232));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r22)*(x230)))+(((new_r02)*(x235)))+(((new_r12)*(x233))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x230)*(x238)))+(((IkReal(-1.00000000000000))*(x230)*(x232)))+(((IkReal(-1.00000000000000))*(new_r20)*(x231))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x230)*(x234)))+(((IkReal(-1.00000000000000))*(new_r21)*(x231)))+(((IkReal(-1.00000000000000))*(x230)*(x240))));
evalcond[9]=((sj6)+(((IkReal(-1.00000000000000))*(new_r21)*(x230)))+(((new_r11)*(x233)))+(((new_r01)*(x235))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x231)))+(((IkReal(-1.00000000000000))*(x230)*(x237)))+(((IkReal(-1.00000000000000))*(x230)*(x236))));
evalcond[11]=((((new_r10)*(x233)))+(((IkReal(-1.00000000000000))*(new_r20)*(x230)))+(((cj5)*(x232)))+(((IkReal(-1.00000000000000))*(x229))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x241=((gconst56)*(sj5));
if( IKabs(((new_r12)*(x241))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x241))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x241)), ((new_r02)*(x241)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x242=IKcos(j4);
IkReal x243=IKsin(j4);
IkReal x244=((IkReal(1.00000000000000))*(cj6));
IkReal x245=((IkReal(1.00000000000000))*(sj5));
IkReal x246=((IkReal(1.00000000000000))*(cj5));
IkReal x247=((new_r00)*(x242));
IkReal x248=((cj5)*(x243));
IkReal x249=((new_r11)*(x243));
IkReal x250=((cj5)*(x242));
IkReal x251=((new_r02)*(x242));
IkReal x252=((new_r12)*(x243));
IkReal x253=((new_r10)*(x243));
IkReal x254=((IkReal(1.00000000000000))*(x243));
IkReal x255=((new_r01)*(x242));
evalcond[0]=((((new_r12)*(x242)))+(((IkReal(-1.00000000000000))*(new_r02)*(x254))));
evalcond[1]=((x251)+(x252)+(((IkReal(-1.00000000000000))*(x245))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x254)))+(((new_r10)*(x242))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x254)))+(((IkReal(-1.00000000000000))*(x244)))+(((new_r11)*(x242))));
evalcond[4]=((((cj5)*(sj6)))+(x255)+(x249));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x244)))+(x253)+(x247));
evalcond[6]=((((new_r12)*(x248)))+(((new_r02)*(x250)))+(((IkReal(-1.00000000000000))*(new_r22)*(x245))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x245)*(x253)))+(((IkReal(-1.00000000000000))*(new_r20)*(x246)))+(((IkReal(-1.00000000000000))*(x245)*(x247))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x246)))+(((IkReal(-1.00000000000000))*(x245)*(x255)))+(((IkReal(-1.00000000000000))*(x245)*(x249))));
evalcond[9]=((((new_r01)*(x250)))+(sj6)+(((IkReal(-1.00000000000000))*(new_r21)*(x245)))+(((new_r11)*(x248))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x246)))+(((IkReal(-1.00000000000000))*(x245)*(x252)))+(((IkReal(-1.00000000000000))*(x245)*(x251))));
evalcond[11]=((((cj5)*(x247)))+(((IkReal(-1.00000000000000))*(new_r20)*(x245)))+(((IkReal(-1.00000000000000))*(x244)))+(((new_r10)*(x248))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "bed71db3c03cfc1f28d9d37196db010a"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h"
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
